{
    "pipes": [],
    "interfaces": [
        {
            "name": "Adapter",
            "id": "interface-Adapter-ff1f06568f181aa7c28232cc55ec8392",
            "file": "src/app/core/adapter.ts",
            "type": "interface",
            "sourceCode": "export interface Adapter<T> {\r\n    adapt(item: any): T;\r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 152,
            "methods": [
                {
                    "name": "adapt",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [],
                    "line": 2,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "AuthState",
            "id": "interface-AuthState-45f21bb5add686fe2642572f59f6ef3f",
            "file": "src/app/auth/reducers/index.ts",
            "type": "interface",
            "sourceCode": "import {\r\n    createSelector,\r\n    createFeatureSelector,\r\n    combineReducers,\r\n    Action,\r\n} from '@ngrx/store';\r\nimport * as fromAuth from './auth.reducer';\r\nimport * as fromRoot from '../../store/app.reducer';\r\n\r\nexport const authFeatureKey = 'auth';\r\n\r\nexport interface AuthState {\r\n    [fromAuth.authStateFeatureKey]: fromAuth.State;\r\n}\r\n\r\nexport interface State extends fromRoot.State {\r\n    [authFeatureKey]: AuthState;\r\n}\r\n\r\n  /** Provide reducer in AoT-compilation happy way */\r\n  export function reducers(state: AuthState | undefined, action: Action) {\r\n    return combineReducers({      \r\n      [fromAuth.authStateFeatureKey]: fromAuth.reducer      \r\n    })(state, action);\r\n  }\r\n\r\n  \r\n  /**\r\n * The createFeatureSelector function selects a piece of state from the root of the state object.\r\n * This is used for selecting feature states that are loaded eagerly or lazily.\r\n */\r\nexport const selectChartFeatureState = createFeatureSelector<State, AuthState>(\r\n    authFeatureKey\r\n);\r\n\r\nexport const selectAuthState = createSelector(\r\n    selectChartFeatureState,\r\n    (state) => state.authState\r\n  );\r\n\r\n  export const selectAuthLoading = createSelector(\r\n    selectAuthState,\r\n    fromAuth.getLoading\r\n  );   \r\n\r\n  export const selectAuthError = createSelector(\r\n    selectAuthState,\r\n    fromAuth.getError\r\n  );     \r\n\r\n  export const selectAuthLoggedIn = createSelector(\r\n    selectAuthState,\r\n    fromAuth.getLoggedIn\r\n  );   \r\n\r\n  export const selectAuthUser = createSelector(\r\n    selectAuthState,\r\n    fromAuth.getUser\r\n  ); ",
            "properties": [
                {
                    "type": "fromAuth.State",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ChartState",
            "id": "interface-ChartState-5a7f14a647d8f3839e006ee507aad763",
            "file": "src/app/charting/reducers/index.ts",
            "type": "interface",
            "sourceCode": "import * as moment from 'moment/moment';\r\n\r\nimport {\r\n  createSelector,\r\n  createFeatureSelector,\r\n  combineReducers,\r\n  Action,\r\n} from '@ngrx/store';\r\n\r\nimport * as fromCharting from './charting.reducer';\r\nimport * as fromRoot from '../../store/app.reducer';\r\nimport { CovidData } from \"../models/CovidData.model\";\r\nimport { state_hash } from 'src/app/core/states';\r\nimport { CovidChartTypes } from '../models/CovidChartTypes';\r\n\r\nexport const chartFeatureKey = 'chart';\r\n\r\nexport interface ChartState {\r\n  [fromCharting.chartingFeatureKey]: fromCharting.State;\r\n}\r\n\r\nexport interface State extends fromRoot.State {\r\n  [chartFeatureKey]: ChartState;\r\n}\r\n\r\n/** Provide reducer in AoT-compilation happy way */\r\nexport function reducers(state: ChartState | undefined, action: Action) {\r\n  return combineReducers({\r\n    [fromCharting.chartingFeatureKey]: fromCharting.reducer\r\n  })(state, action);\r\n}\r\n\r\n/**\r\n* The createFeatureSelector function selects a piece of state from the root of the state object.\r\n* This is used for selecting feature states that are loaded eagerly or lazily.\r\n*/\r\nexport const selectChartState = createFeatureSelector<State, ChartState>(\r\n  chartFeatureKey\r\n);\r\n\r\nexport const selectChartingState = createSelector(\r\n  selectChartState,\r\n  (state) => state.charting\r\n);\r\n\r\nexport const selectChartingLoading = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getLoading\r\n);\r\n\r\nexport const selectChartingEverLoaded = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getEverLoaded\r\n);\r\n\r\nexport const selectChartingError = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getError\r\n);\r\n\r\nexport const selectCovidData = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getCovidData\r\n);\r\n\r\nexport const selectSelected = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getSelected\r\n);\r\n\r\nexport const selectSelectedType = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getSelectedType\r\n);\r\n\r\nexport const selectStartDate = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getStartDate\r\n);\r\n\r\nexport const selectEndDate = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getEndDate\r\n);\r\n\r\nexport const selectEndDateToDate = createSelector(\r\n  selectEndDate,\r\n  (d: string) => { return new Date(d) }\r\n)\r\n\r\nexport const selectStartDateToDate = createSelector(\r\n  selectStartDate,\r\n  (d: string) => { return new Date(d) }\r\n)\r\n\r\nexport const selectAllChartingData = createSelector(\r\n  selectCovidData,\r\n  selectStartDateToDate,\r\n  selectEndDateToDate,\r\n  (d: CovidData[], sd: Date, ed: Date) => {\r\n    const dateFilteredData = d.filter((a) => { return a.date >= sd && a.date <= ed });\r\n    return {\r\n      [CovidChartTypes.Deaths]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Deaths)), label: CovidData.getLabel(CovidChartTypes.Deaths), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Deaths, true)), label: CovidData.getLabel(CovidChartTypes.Deaths, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Hospitalized]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Hospitalized)), label: CovidData.getLabel(CovidChartTypes.Hospitalized), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Hospitalized, true)), label: CovidData.getLabel(CovidChartTypes.Hospitalized, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Infections]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Infections)), label: CovidData.getLabel(CovidChartTypes.Infections), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Infections, true)), label: CovidData.getLabel(CovidChartTypes.Infections, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Tests]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Tests)), label: CovidData.getLabel(CovidChartTypes.Tests), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Tests, true)), label: CovidData.getLabel(CovidChartTypes.Tests, true), type: \"bar\", yAxisID: 'right-axis' }]\r\n    }\r\n  }\r\n)\r\n\r\nexport const selectChartingDataForDeaths = createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Deaths];\r\n  }\r\n)\r\n\r\nexport const selectChartingDataForInfected = createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Infections];\r\n  }\r\n)\r\n\r\nexport const selectChartingDataForHospitalized = createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Hospitalized];\r\n  }\r\n)\r\n\r\nexport const selectChartingDataForTests = createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Tests];\r\n  }\r\n)\r\n\r\nexport const selectChartingDataForSelected = createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[st];\r\n  }\r\n)\r\n\r\nexport const selectChartingChartLabels = createSelector(\r\n  selectCovidData,\r\n  selectStartDateToDate,\r\n  selectEndDateToDate,\r\n  (d: CovidData[], sd: Date, ed: Date) => { return d.filter((a) => { return a.date >= sd && a.date <= ed }).map(i => moment(i.date)) }\r\n)\r\n\r\nexport const selectChartTitle = createSelector(\r\n  selectSelected,\r\n  selectSelectedType,\r\n  (selected: string, selectedType: string) => `${selectedType} for ${state_hash[selected]}`\r\n)",
            "properties": [
                {
                    "type": "fromCharting.State",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CovidDataInterface",
            "id": "interface-CovidDataInterface-3f171e4c2e974b1787fe9864ae47c5dd",
            "file": "src/app/charting/models/CovidData.model.ts",
            "type": "interface",
            "sourceCode": "import { state_hash } from '../../core/states';\r\nimport { CovidChartTypes } from './CovidChartTypes';\r\n\r\ninterface CovidDataInterface {\r\n    date: Date;\r\n    death: number;\r\n    deathIncrease: number;\r\n    hospitalizedCumulative: number;\r\n    hospitalizedCurrently: number;\r\n    hospitalizedIncrease: number;\r\n    inIcuCumulative: number;\r\n    inIcuCurrently: number;\r\n    onVentilatorCumulative: number;\r\n    onVentilatorCurrently: number;\r\n    positive: number;\r\n    positiveIncrease: number;\r\n    totalTestResults: number;\r\n    totalTestResultsIncrease: number;\r\n    recovered: number;\r\n    name: string;\r\n}\r\n\r\nexport class CovidData implements CovidDataInterface {\r\n    date: Date;\r\n    name: string;\r\n    constructor(\r\n        _date: number,\r\n        public death: number,\r\n        public deathIncrease: number,\r\n        public hospitalizedCumulative: number,\r\n        public hospitalizedCurrently: number,\r\n        public hospitalizedIncrease: number,\r\n        public inIcuCumulative: number,\r\n        public inIcuCurrently: number,\r\n        public onVentilatorCumulative: number,\r\n        public onVentilatorCurrently: number,\r\n        public positive: number,\r\n        public positiveIncrease: number,\r\n        public totalTestResults: number,\r\n        public totalTestResultsIncrease: number,\r\n        public recovered: number,\r\n        _name: string\r\n    ) {\r\n        try {\r\n            this.date = new Date(_date / 10000, _date % 10000 / 100 - 1, _date % 100);\r\n\r\n        } catch (error) {\r\n            console.log(`Error in date conversion, National Covid Day adapter ${error}`);\r\n        }\r\n\r\n        this.name = state_hash[_name];\r\n    }\r\n\r\n    getData(dataType: string, daily: boolean = false) : number {\r\n        switch (dataType) {\r\n            case CovidChartTypes.Infections:\r\n                return daily ?  this.positiveIncrease : this.positive;                \r\n            case CovidChartTypes.Deaths:\r\n                return daily ?  this.deathIncrease : this.death;                \r\n            case CovidChartTypes.Hospitalized:\r\n                return daily ?  this.hospitalizedIncrease : this.hospitalizedCumulative;                \r\n            case CovidChartTypes.Tests:\r\n                return daily ?  this.totalTestResultsIncrease : this.totalTestResults;                \r\n        }\r\n    }\r\n\r\n    static getLabel(dataType: string, daily: boolean = false) : string {\r\n        return daily ? `Daily ${dataType}` : `Total ${dataType}`;\r\n    }\r\n\r\n\r\n    static adapt(item: any): CovidData {\r\n        return new CovidData(\r\n            item.date,\r\n            item.death,\r\n            item.deathIncrease,\r\n            item.hospitalizedCumulative,\r\n            item.hospitalizedCurrently,\r\n            item.hospitalizedIncrease,\r\n            item.inIcuCumulative,\r\n            item.inIcuCurrently,\r\n            item.onVentilatorCumulative,\r\n            item.onVentilatorCurrently,\r\n            item.positive,\r\n            item.positiveIncrease,\r\n            item.totalTestResults,\r\n            item.totalTestResultsIncrease,\r\n            item.recovered,\r\n            item.name\r\n        )\r\n    }\r\n\r\n}",
            "properties": [
                {
                    "name": "date",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "death",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "deathIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "hospitalizedCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "hospitalizedCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "hospitalizedIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "inIcuCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "inIcuCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "onVentilatorCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "onVentilatorCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "positive",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "positiveIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "recovered",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "totalTestResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "totalTestResultsIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "GIF",
            "id": "interface-GIF-b9d57fc6b0ecd4b8c1b80877702b5c50",
            "file": "src/app/meme/models/GIF.model.ts",
            "type": "interface",
            "sourceCode": "import IUser from \"./user.model\";\r\n\r\nexport interface GIF {\r\n    type: 'video' | 'gif'\r\n    id: string \r\n    slug: string\r\n    url: string\r\n    bitly_gif_url: string\r\n    bitly_url: string\r\n    embed_url: string\r\n    username: string\r\n    source: string\r\n    rating: string\r\n    content_url: string\r\n    source_tld: string\r\n    source_post_url: string\r\n    is_indexable: boolean\r\n    is_sticker: boolean\r\n    import_datetime: string\r\n    trending_datetime: string\r\n    user: IUser\r\n    images: IImages\r\n    title: string\r\n    is_hidden: boolean\r\n    is_scheduled: boolean\r\n    is_removed: boolean\r\n    tags: string[]\r\n    bottle_data: IBottleData\r\n    analytics_response_payload: string\r\n    video?: IVideo\r\n    is_favorite: boolean\r\n}    \r\n\r\ninterface IBottleData {\r\n    tid?: string\r\n    tags?: string[]\r\n}\r\n\r\n\r\nexport interface IRendition {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface IImage extends IRendition {\r\n    url: string\r\n    size?: string\r\n}\r\n\r\nexport interface IURLAsset extends IImage {}\r\n\r\nexport interface IMP4 extends IRendition {\r\n    mp4: string\r\n    mp4_size: string\r\n}\r\n\r\nexport interface IWebP {\r\n    webp: string\r\n    webp_size: string\r\n}\r\n\r\nexport type ImageAllTypes = IImage & IWebP & IMP4\r\n\r\nexport interface IImages {\r\n    fixed_height_still: IImage\r\n    original_still: IImage\r\n    fixed_width: ImageAllTypes\r\n    fixed_height_small_still: IImage\r\n    fixed_height_downsampled: IImage & IWebP\r\n    preview: IImage\r\n    fixed_height_small: ImageAllTypes\r\n    downsized_still: IImage\r\n    downsized: IImage\r\n    downsized_large: IImage\r\n    fixed_width_small_still: IImage\r\n    preview_webp: IImage\r\n    fixed_width_still: IImage\r\n    fixed_width_small: ImageAllTypes\r\n    downsized_small: IImage & IMP4\r\n    fixed_width_downsampled: IImage & IWebP\r\n    downsized_medium: IImage\r\n    original: ImageAllTypes\r\n    fixed_height: ImageAllTypes\r\n    looping: IMP4\r\n    original_mp4: IMP4\r\n    preview_gif: IImage\r\n    '480w_still': IImage\r\n}\r\n\r\nexport interface IVideoAssets {\r\n    source: IURLAsset\r\n    '360p': IURLAsset\r\n    '480p': IURLAsset\r\n    '720p': IURLAsset\r\n    '1080p': IURLAsset\r\n    '4k': IURLAsset\r\n}\r\n\r\nexport default interface IVideo {\r\n    assets: IVideoAssets\r\n    description: string\r\n    dash_manifest_url: string\r\n    hls_manifest_url: string\r\n    previews: IImages\r\n}",
            "properties": [
                {
                    "name": "analytics_response_payload",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "bitly_gif_url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "bitly_url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "bottle_data",
                    "type": "IBottleData",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "content_url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "embed_url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "images",
                    "type": "IImages",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "import_datetime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "is_favorite",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "is_hidden",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "is_indexable",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "is_removed",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "is_scheduled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "is_sticker",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "rating",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "slug",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "source",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "source_post_url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "source_tld",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "tags",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "trending_datetime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "type",
                    "type": "\"video\" | \"gif\"",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "user",
                    "type": "IUser",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "video",
                    "type": "IVideo",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "GiphyMeta",
            "id": "interface-GiphyMeta-31df9f33bd71b89177d9f0b082721395",
            "file": "src/app/meme/models/Meta.model.ts",
            "type": "interface",
            "sourceCode": "export interface GiphyMeta {\r\n    msg: string,\r\n    status: string,\r\n    response_id: string\r\n}",
            "properties": [
                {
                    "name": "msg",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "response_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "GiphyPagination",
            "id": "interface-GiphyPagination-5f508c33c1e8b27fb616646e881e04ee",
            "file": "src/app/meme/models/pagination.model.ts",
            "type": "interface",
            "sourceCode": "export interface GiphyPagination {\r\n    offset: number,\r\n    total_count: number,\r\n    count: number\r\n}",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "offset",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "total_count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "GiphyResult",
            "id": "interface-GiphyResult-94695c6ade1d2ae31820f4563f34a391",
            "file": "src/app/meme/models/GiphyResult.model.ts",
            "type": "interface",
            "sourceCode": "import { GIF } from './GIF.model';\r\nimport { GiphyMeta } from './Meta.model';\r\nimport { GiphyPagination } from './pagination.model';\r\n\r\nexport interface GiphyResult {\r\n    data: GIF[],\r\n    pagination: GiphyPagination,\r\n    meta: GiphyMeta\r\n}",
            "properties": [
                {
                    "name": "data",
                    "type": "GIF[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "meta",
                    "type": "GiphyMeta",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "pagination",
                    "type": "GiphyPagination",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IBottleData",
            "id": "interface-IBottleData-b9d57fc6b0ecd4b8c1b80877702b5c50",
            "file": "src/app/meme/models/GIF.model.ts",
            "type": "interface",
            "sourceCode": "import IUser from \"./user.model\";\r\n\r\nexport interface GIF {\r\n    type: 'video' | 'gif'\r\n    id: string \r\n    slug: string\r\n    url: string\r\n    bitly_gif_url: string\r\n    bitly_url: string\r\n    embed_url: string\r\n    username: string\r\n    source: string\r\n    rating: string\r\n    content_url: string\r\n    source_tld: string\r\n    source_post_url: string\r\n    is_indexable: boolean\r\n    is_sticker: boolean\r\n    import_datetime: string\r\n    trending_datetime: string\r\n    user: IUser\r\n    images: IImages\r\n    title: string\r\n    is_hidden: boolean\r\n    is_scheduled: boolean\r\n    is_removed: boolean\r\n    tags: string[]\r\n    bottle_data: IBottleData\r\n    analytics_response_payload: string\r\n    video?: IVideo\r\n    is_favorite: boolean\r\n}    \r\n\r\ninterface IBottleData {\r\n    tid?: string\r\n    tags?: string[]\r\n}\r\n\r\n\r\nexport interface IRendition {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface IImage extends IRendition {\r\n    url: string\r\n    size?: string\r\n}\r\n\r\nexport interface IURLAsset extends IImage {}\r\n\r\nexport interface IMP4 extends IRendition {\r\n    mp4: string\r\n    mp4_size: string\r\n}\r\n\r\nexport interface IWebP {\r\n    webp: string\r\n    webp_size: string\r\n}\r\n\r\nexport type ImageAllTypes = IImage & IWebP & IMP4\r\n\r\nexport interface IImages {\r\n    fixed_height_still: IImage\r\n    original_still: IImage\r\n    fixed_width: ImageAllTypes\r\n    fixed_height_small_still: IImage\r\n    fixed_height_downsampled: IImage & IWebP\r\n    preview: IImage\r\n    fixed_height_small: ImageAllTypes\r\n    downsized_still: IImage\r\n    downsized: IImage\r\n    downsized_large: IImage\r\n    fixed_width_small_still: IImage\r\n    preview_webp: IImage\r\n    fixed_width_still: IImage\r\n    fixed_width_small: ImageAllTypes\r\n    downsized_small: IImage & IMP4\r\n    fixed_width_downsampled: IImage & IWebP\r\n    downsized_medium: IImage\r\n    original: ImageAllTypes\r\n    fixed_height: ImageAllTypes\r\n    looping: IMP4\r\n    original_mp4: IMP4\r\n    preview_gif: IImage\r\n    '480w_still': IImage\r\n}\r\n\r\nexport interface IVideoAssets {\r\n    source: IURLAsset\r\n    '360p': IURLAsset\r\n    '480p': IURLAsset\r\n    '720p': IURLAsset\r\n    '1080p': IURLAsset\r\n    '4k': IURLAsset\r\n}\r\n\r\nexport default interface IVideo {\r\n    assets: IVideoAssets\r\n    description: string\r\n    dash_manifest_url: string\r\n    hls_manifest_url: string\r\n    previews: IImages\r\n}",
            "properties": [
                {
                    "name": "tags",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "tid",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IImage",
            "id": "interface-IImage-b9d57fc6b0ecd4b8c1b80877702b5c50",
            "file": "src/app/meme/models/GIF.model.ts",
            "type": "interface",
            "sourceCode": "import IUser from \"./user.model\";\r\n\r\nexport interface GIF {\r\n    type: 'video' | 'gif'\r\n    id: string \r\n    slug: string\r\n    url: string\r\n    bitly_gif_url: string\r\n    bitly_url: string\r\n    embed_url: string\r\n    username: string\r\n    source: string\r\n    rating: string\r\n    content_url: string\r\n    source_tld: string\r\n    source_post_url: string\r\n    is_indexable: boolean\r\n    is_sticker: boolean\r\n    import_datetime: string\r\n    trending_datetime: string\r\n    user: IUser\r\n    images: IImages\r\n    title: string\r\n    is_hidden: boolean\r\n    is_scheduled: boolean\r\n    is_removed: boolean\r\n    tags: string[]\r\n    bottle_data: IBottleData\r\n    analytics_response_payload: string\r\n    video?: IVideo\r\n    is_favorite: boolean\r\n}    \r\n\r\ninterface IBottleData {\r\n    tid?: string\r\n    tags?: string[]\r\n}\r\n\r\n\r\nexport interface IRendition {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface IImage extends IRendition {\r\n    url: string\r\n    size?: string\r\n}\r\n\r\nexport interface IURLAsset extends IImage {}\r\n\r\nexport interface IMP4 extends IRendition {\r\n    mp4: string\r\n    mp4_size: string\r\n}\r\n\r\nexport interface IWebP {\r\n    webp: string\r\n    webp_size: string\r\n}\r\n\r\nexport type ImageAllTypes = IImage & IWebP & IMP4\r\n\r\nexport interface IImages {\r\n    fixed_height_still: IImage\r\n    original_still: IImage\r\n    fixed_width: ImageAllTypes\r\n    fixed_height_small_still: IImage\r\n    fixed_height_downsampled: IImage & IWebP\r\n    preview: IImage\r\n    fixed_height_small: ImageAllTypes\r\n    downsized_still: IImage\r\n    downsized: IImage\r\n    downsized_large: IImage\r\n    fixed_width_small_still: IImage\r\n    preview_webp: IImage\r\n    fixed_width_still: IImage\r\n    fixed_width_small: ImageAllTypes\r\n    downsized_small: IImage & IMP4\r\n    fixed_width_downsampled: IImage & IWebP\r\n    downsized_medium: IImage\r\n    original: ImageAllTypes\r\n    fixed_height: ImageAllTypes\r\n    looping: IMP4\r\n    original_mp4: IMP4\r\n    preview_gif: IImage\r\n    '480w_still': IImage\r\n}\r\n\r\nexport interface IVideoAssets {\r\n    source: IURLAsset\r\n    '360p': IURLAsset\r\n    '480p': IURLAsset\r\n    '720p': IURLAsset\r\n    '1080p': IURLAsset\r\n    '4k': IURLAsset\r\n}\r\n\r\nexport default interface IVideo {\r\n    assets: IVideoAssets\r\n    description: string\r\n    dash_manifest_url: string\r\n    hls_manifest_url: string\r\n    previews: IImages\r\n}",
            "properties": [
                {
                    "name": "size",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IRendition"
        },
        {
            "name": "IImages",
            "id": "interface-IImages-b9d57fc6b0ecd4b8c1b80877702b5c50",
            "file": "src/app/meme/models/GIF.model.ts",
            "type": "interface",
            "sourceCode": "import IUser from \"./user.model\";\r\n\r\nexport interface GIF {\r\n    type: 'video' | 'gif'\r\n    id: string \r\n    slug: string\r\n    url: string\r\n    bitly_gif_url: string\r\n    bitly_url: string\r\n    embed_url: string\r\n    username: string\r\n    source: string\r\n    rating: string\r\n    content_url: string\r\n    source_tld: string\r\n    source_post_url: string\r\n    is_indexable: boolean\r\n    is_sticker: boolean\r\n    import_datetime: string\r\n    trending_datetime: string\r\n    user: IUser\r\n    images: IImages\r\n    title: string\r\n    is_hidden: boolean\r\n    is_scheduled: boolean\r\n    is_removed: boolean\r\n    tags: string[]\r\n    bottle_data: IBottleData\r\n    analytics_response_payload: string\r\n    video?: IVideo\r\n    is_favorite: boolean\r\n}    \r\n\r\ninterface IBottleData {\r\n    tid?: string\r\n    tags?: string[]\r\n}\r\n\r\n\r\nexport interface IRendition {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface IImage extends IRendition {\r\n    url: string\r\n    size?: string\r\n}\r\n\r\nexport interface IURLAsset extends IImage {}\r\n\r\nexport interface IMP4 extends IRendition {\r\n    mp4: string\r\n    mp4_size: string\r\n}\r\n\r\nexport interface IWebP {\r\n    webp: string\r\n    webp_size: string\r\n}\r\n\r\nexport type ImageAllTypes = IImage & IWebP & IMP4\r\n\r\nexport interface IImages {\r\n    fixed_height_still: IImage\r\n    original_still: IImage\r\n    fixed_width: ImageAllTypes\r\n    fixed_height_small_still: IImage\r\n    fixed_height_downsampled: IImage & IWebP\r\n    preview: IImage\r\n    fixed_height_small: ImageAllTypes\r\n    downsized_still: IImage\r\n    downsized: IImage\r\n    downsized_large: IImage\r\n    fixed_width_small_still: IImage\r\n    preview_webp: IImage\r\n    fixed_width_still: IImage\r\n    fixed_width_small: ImageAllTypes\r\n    downsized_small: IImage & IMP4\r\n    fixed_width_downsampled: IImage & IWebP\r\n    downsized_medium: IImage\r\n    original: ImageAllTypes\r\n    fixed_height: ImageAllTypes\r\n    looping: IMP4\r\n    original_mp4: IMP4\r\n    preview_gif: IImage\r\n    '480w_still': IImage\r\n}\r\n\r\nexport interface IVideoAssets {\r\n    source: IURLAsset\r\n    '360p': IURLAsset\r\n    '480p': IURLAsset\r\n    '720p': IURLAsset\r\n    '1080p': IURLAsset\r\n    '4k': IURLAsset\r\n}\r\n\r\nexport default interface IVideo {\r\n    assets: IVideoAssets\r\n    description: string\r\n    dash_manifest_url: string\r\n    hls_manifest_url: string\r\n    previews: IImages\r\n}",
            "properties": [
                {
                    "name": "480w_still",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "downsized",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "downsized_large",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "downsized_medium",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "downsized_small",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "downsized_still",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "fixed_height",
                    "type": "ImageAllTypes",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "fixed_height_downsampled",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "fixed_height_small",
                    "type": "ImageAllTypes",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "fixed_height_small_still",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "fixed_height_still",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "fixed_width",
                    "type": "ImageAllTypes",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "fixed_width_downsampled",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "fixed_width_small",
                    "type": "ImageAllTypes",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "fixed_width_small_still",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "fixed_width_still",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "looping",
                    "type": "IMP4",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "original",
                    "type": "ImageAllTypes",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "original_mp4",
                    "type": "IMP4",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "original_still",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "preview",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "preview_gif",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "preview_webp",
                    "type": "IImage",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IMP4",
            "id": "interface-IMP4-b9d57fc6b0ecd4b8c1b80877702b5c50",
            "file": "src/app/meme/models/GIF.model.ts",
            "type": "interface",
            "sourceCode": "import IUser from \"./user.model\";\r\n\r\nexport interface GIF {\r\n    type: 'video' | 'gif'\r\n    id: string \r\n    slug: string\r\n    url: string\r\n    bitly_gif_url: string\r\n    bitly_url: string\r\n    embed_url: string\r\n    username: string\r\n    source: string\r\n    rating: string\r\n    content_url: string\r\n    source_tld: string\r\n    source_post_url: string\r\n    is_indexable: boolean\r\n    is_sticker: boolean\r\n    import_datetime: string\r\n    trending_datetime: string\r\n    user: IUser\r\n    images: IImages\r\n    title: string\r\n    is_hidden: boolean\r\n    is_scheduled: boolean\r\n    is_removed: boolean\r\n    tags: string[]\r\n    bottle_data: IBottleData\r\n    analytics_response_payload: string\r\n    video?: IVideo\r\n    is_favorite: boolean\r\n}    \r\n\r\ninterface IBottleData {\r\n    tid?: string\r\n    tags?: string[]\r\n}\r\n\r\n\r\nexport interface IRendition {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface IImage extends IRendition {\r\n    url: string\r\n    size?: string\r\n}\r\n\r\nexport interface IURLAsset extends IImage {}\r\n\r\nexport interface IMP4 extends IRendition {\r\n    mp4: string\r\n    mp4_size: string\r\n}\r\n\r\nexport interface IWebP {\r\n    webp: string\r\n    webp_size: string\r\n}\r\n\r\nexport type ImageAllTypes = IImage & IWebP & IMP4\r\n\r\nexport interface IImages {\r\n    fixed_height_still: IImage\r\n    original_still: IImage\r\n    fixed_width: ImageAllTypes\r\n    fixed_height_small_still: IImage\r\n    fixed_height_downsampled: IImage & IWebP\r\n    preview: IImage\r\n    fixed_height_small: ImageAllTypes\r\n    downsized_still: IImage\r\n    downsized: IImage\r\n    downsized_large: IImage\r\n    fixed_width_small_still: IImage\r\n    preview_webp: IImage\r\n    fixed_width_still: IImage\r\n    fixed_width_small: ImageAllTypes\r\n    downsized_small: IImage & IMP4\r\n    fixed_width_downsampled: IImage & IWebP\r\n    downsized_medium: IImage\r\n    original: ImageAllTypes\r\n    fixed_height: ImageAllTypes\r\n    looping: IMP4\r\n    original_mp4: IMP4\r\n    preview_gif: IImage\r\n    '480w_still': IImage\r\n}\r\n\r\nexport interface IVideoAssets {\r\n    source: IURLAsset\r\n    '360p': IURLAsset\r\n    '480p': IURLAsset\r\n    '720p': IURLAsset\r\n    '1080p': IURLAsset\r\n    '4k': IURLAsset\r\n}\r\n\r\nexport default interface IVideo {\r\n    assets: IVideoAssets\r\n    description: string\r\n    dash_manifest_url: string\r\n    hls_manifest_url: string\r\n    previews: IImages\r\n}",
            "properties": [
                {
                    "name": "mp4",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "mp4_size",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IRendition"
        },
        {
            "name": "IProfileUser",
            "id": "interface-IProfileUser-fa29235bd7957cf4fc127b827c19a3ae",
            "file": "src/app/meme/models/user.model.ts",
            "type": "interface",
            "sourceCode": "interface IPublicUser {\r\n    // Username - writable by staff and non-partner/artist users\r\n    username: string\r\n    // READ ONLY FIELDS BELOW\r\n    // Unique ID\r\n    id: number\r\n    // URL to the user's avatar\r\n    avatar_url: string\r\n    is_verified: boolean\r\n}\r\n\r\nexport default interface IUser extends IPublicUser {\r\n    // user about bio\r\n    about_bio: string\r\n    // user's display name\r\n    display_name: string\r\n    user_type: 'partner' | 'artist' | 'user' | 'anonymous'\r\n    is_public: boolean\r\n    // personal website URL\r\n    primary_site: string\r\n    // twitter handle or url\r\n    twitter: string\r\n    // facebook url or handle\r\n    facebook: string\r\n    // instagram handle or url\r\n    instagram: string\r\n    // tumblr url\r\n    tumblr_site: string\r\n    // READ ONLY FIELDS BELOW\r\n    // twitter value as url\r\n    twitter_url?: string\r\n    // facebook value as url (no  change)\r\n    facebook_url?: string\r\n    // instagram value as url\r\n    instagram_url?: string\r\n    // tumblr site value as URL (no change)\r\n    tumblr_url?: string\r\n    // website URL -- primary_site value if there is one\r\n    website_url?: string\r\n}\r\n\r\nexport interface IProfileUser extends IUser {\r\n    // user's email\r\n    email: string\r\n    gender?: 'male' | 'female' | 'other'\r\n    // birthdate in 'YYYY-MM-DD' format\r\n    birthdate?: string\r\n    // READ ONLY FIELDS BELOW\r\n    // URL to channel\r\n    profile_url: string\r\n    // if the user hasn't choosen an avatar\r\n    has_default_avatar: boolean\r\n}",
            "properties": [
                {
                    "name": "birthdate",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "gender",
                    "type": "\"male\" | \"female\" | \"other\"",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "has_default_avatar",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "profile_url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IUser"
        },
        {
            "name": "IPublicUser",
            "id": "interface-IPublicUser-fa29235bd7957cf4fc127b827c19a3ae",
            "file": "src/app/meme/models/user.model.ts",
            "type": "interface",
            "sourceCode": "interface IPublicUser {\r\n    // Username - writable by staff and non-partner/artist users\r\n    username: string\r\n    // READ ONLY FIELDS BELOW\r\n    // Unique ID\r\n    id: number\r\n    // URL to the user's avatar\r\n    avatar_url: string\r\n    is_verified: boolean\r\n}\r\n\r\nexport default interface IUser extends IPublicUser {\r\n    // user about bio\r\n    about_bio: string\r\n    // user's display name\r\n    display_name: string\r\n    user_type: 'partner' | 'artist' | 'user' | 'anonymous'\r\n    is_public: boolean\r\n    // personal website URL\r\n    primary_site: string\r\n    // twitter handle or url\r\n    twitter: string\r\n    // facebook url or handle\r\n    facebook: string\r\n    // instagram handle or url\r\n    instagram: string\r\n    // tumblr url\r\n    tumblr_site: string\r\n    // READ ONLY FIELDS BELOW\r\n    // twitter value as url\r\n    twitter_url?: string\r\n    // facebook value as url (no  change)\r\n    facebook_url?: string\r\n    // instagram value as url\r\n    instagram_url?: string\r\n    // tumblr site value as URL (no change)\r\n    tumblr_url?: string\r\n    // website URL -- primary_site value if there is one\r\n    website_url?: string\r\n}\r\n\r\nexport interface IProfileUser extends IUser {\r\n    // user's email\r\n    email: string\r\n    gender?: 'male' | 'female' | 'other'\r\n    // birthdate in 'YYYY-MM-DD' format\r\n    birthdate?: string\r\n    // READ ONLY FIELDS BELOW\r\n    // URL to channel\r\n    profile_url: string\r\n    // if the user hasn't choosen an avatar\r\n    has_default_avatar: boolean\r\n}",
            "properties": [
                {
                    "name": "avatar_url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "is_verified",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IRendition",
            "id": "interface-IRendition-b9d57fc6b0ecd4b8c1b80877702b5c50",
            "file": "src/app/meme/models/GIF.model.ts",
            "type": "interface",
            "sourceCode": "import IUser from \"./user.model\";\r\n\r\nexport interface GIF {\r\n    type: 'video' | 'gif'\r\n    id: string \r\n    slug: string\r\n    url: string\r\n    bitly_gif_url: string\r\n    bitly_url: string\r\n    embed_url: string\r\n    username: string\r\n    source: string\r\n    rating: string\r\n    content_url: string\r\n    source_tld: string\r\n    source_post_url: string\r\n    is_indexable: boolean\r\n    is_sticker: boolean\r\n    import_datetime: string\r\n    trending_datetime: string\r\n    user: IUser\r\n    images: IImages\r\n    title: string\r\n    is_hidden: boolean\r\n    is_scheduled: boolean\r\n    is_removed: boolean\r\n    tags: string[]\r\n    bottle_data: IBottleData\r\n    analytics_response_payload: string\r\n    video?: IVideo\r\n    is_favorite: boolean\r\n}    \r\n\r\ninterface IBottleData {\r\n    tid?: string\r\n    tags?: string[]\r\n}\r\n\r\n\r\nexport interface IRendition {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface IImage extends IRendition {\r\n    url: string\r\n    size?: string\r\n}\r\n\r\nexport interface IURLAsset extends IImage {}\r\n\r\nexport interface IMP4 extends IRendition {\r\n    mp4: string\r\n    mp4_size: string\r\n}\r\n\r\nexport interface IWebP {\r\n    webp: string\r\n    webp_size: string\r\n}\r\n\r\nexport type ImageAllTypes = IImage & IWebP & IMP4\r\n\r\nexport interface IImages {\r\n    fixed_height_still: IImage\r\n    original_still: IImage\r\n    fixed_width: ImageAllTypes\r\n    fixed_height_small_still: IImage\r\n    fixed_height_downsampled: IImage & IWebP\r\n    preview: IImage\r\n    fixed_height_small: ImageAllTypes\r\n    downsized_still: IImage\r\n    downsized: IImage\r\n    downsized_large: IImage\r\n    fixed_width_small_still: IImage\r\n    preview_webp: IImage\r\n    fixed_width_still: IImage\r\n    fixed_width_small: ImageAllTypes\r\n    downsized_small: IImage & IMP4\r\n    fixed_width_downsampled: IImage & IWebP\r\n    downsized_medium: IImage\r\n    original: ImageAllTypes\r\n    fixed_height: ImageAllTypes\r\n    looping: IMP4\r\n    original_mp4: IMP4\r\n    preview_gif: IImage\r\n    '480w_still': IImage\r\n}\r\n\r\nexport interface IVideoAssets {\r\n    source: IURLAsset\r\n    '360p': IURLAsset\r\n    '480p': IURLAsset\r\n    '720p': IURLAsset\r\n    '1080p': IURLAsset\r\n    '4k': IURLAsset\r\n}\r\n\r\nexport default interface IVideo {\r\n    assets: IVideoAssets\r\n    description: string\r\n    dash_manifest_url: string\r\n    hls_manifest_url: string\r\n    previews: IImages\r\n}",
            "properties": [
                {
                    "name": "height",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IURLAsset",
            "id": "interface-IURLAsset-b9d57fc6b0ecd4b8c1b80877702b5c50",
            "file": "src/app/meme/models/GIF.model.ts",
            "type": "interface",
            "sourceCode": "import IUser from \"./user.model\";\r\n\r\nexport interface GIF {\r\n    type: 'video' | 'gif'\r\n    id: string \r\n    slug: string\r\n    url: string\r\n    bitly_gif_url: string\r\n    bitly_url: string\r\n    embed_url: string\r\n    username: string\r\n    source: string\r\n    rating: string\r\n    content_url: string\r\n    source_tld: string\r\n    source_post_url: string\r\n    is_indexable: boolean\r\n    is_sticker: boolean\r\n    import_datetime: string\r\n    trending_datetime: string\r\n    user: IUser\r\n    images: IImages\r\n    title: string\r\n    is_hidden: boolean\r\n    is_scheduled: boolean\r\n    is_removed: boolean\r\n    tags: string[]\r\n    bottle_data: IBottleData\r\n    analytics_response_payload: string\r\n    video?: IVideo\r\n    is_favorite: boolean\r\n}    \r\n\r\ninterface IBottleData {\r\n    tid?: string\r\n    tags?: string[]\r\n}\r\n\r\n\r\nexport interface IRendition {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface IImage extends IRendition {\r\n    url: string\r\n    size?: string\r\n}\r\n\r\nexport interface IURLAsset extends IImage {}\r\n\r\nexport interface IMP4 extends IRendition {\r\n    mp4: string\r\n    mp4_size: string\r\n}\r\n\r\nexport interface IWebP {\r\n    webp: string\r\n    webp_size: string\r\n}\r\n\r\nexport type ImageAllTypes = IImage & IWebP & IMP4\r\n\r\nexport interface IImages {\r\n    fixed_height_still: IImage\r\n    original_still: IImage\r\n    fixed_width: ImageAllTypes\r\n    fixed_height_small_still: IImage\r\n    fixed_height_downsampled: IImage & IWebP\r\n    preview: IImage\r\n    fixed_height_small: ImageAllTypes\r\n    downsized_still: IImage\r\n    downsized: IImage\r\n    downsized_large: IImage\r\n    fixed_width_small_still: IImage\r\n    preview_webp: IImage\r\n    fixed_width_still: IImage\r\n    fixed_width_small: ImageAllTypes\r\n    downsized_small: IImage & IMP4\r\n    fixed_width_downsampled: IImage & IWebP\r\n    downsized_medium: IImage\r\n    original: ImageAllTypes\r\n    fixed_height: ImageAllTypes\r\n    looping: IMP4\r\n    original_mp4: IMP4\r\n    preview_gif: IImage\r\n    '480w_still': IImage\r\n}\r\n\r\nexport interface IVideoAssets {\r\n    source: IURLAsset\r\n    '360p': IURLAsset\r\n    '480p': IURLAsset\r\n    '720p': IURLAsset\r\n    '1080p': IURLAsset\r\n    '4k': IURLAsset\r\n}\r\n\r\nexport default interface IVideo {\r\n    assets: IVideoAssets\r\n    description: string\r\n    dash_manifest_url: string\r\n    hls_manifest_url: string\r\n    previews: IImages\r\n}",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "IImage"
        },
        {
            "name": "IUser",
            "id": "interface-IUser-fa29235bd7957cf4fc127b827c19a3ae",
            "file": "src/app/meme/models/user.model.ts",
            "type": "interface",
            "sourceCode": "interface IPublicUser {\r\n    // Username - writable by staff and non-partner/artist users\r\n    username: string\r\n    // READ ONLY FIELDS BELOW\r\n    // Unique ID\r\n    id: number\r\n    // URL to the user's avatar\r\n    avatar_url: string\r\n    is_verified: boolean\r\n}\r\n\r\nexport default interface IUser extends IPublicUser {\r\n    // user about bio\r\n    about_bio: string\r\n    // user's display name\r\n    display_name: string\r\n    user_type: 'partner' | 'artist' | 'user' | 'anonymous'\r\n    is_public: boolean\r\n    // personal website URL\r\n    primary_site: string\r\n    // twitter handle or url\r\n    twitter: string\r\n    // facebook url or handle\r\n    facebook: string\r\n    // instagram handle or url\r\n    instagram: string\r\n    // tumblr url\r\n    tumblr_site: string\r\n    // READ ONLY FIELDS BELOW\r\n    // twitter value as url\r\n    twitter_url?: string\r\n    // facebook value as url (no  change)\r\n    facebook_url?: string\r\n    // instagram value as url\r\n    instagram_url?: string\r\n    // tumblr site value as URL (no change)\r\n    tumblr_url?: string\r\n    // website URL -- primary_site value if there is one\r\n    website_url?: string\r\n}\r\n\r\nexport interface IProfileUser extends IUser {\r\n    // user's email\r\n    email: string\r\n    gender?: 'male' | 'female' | 'other'\r\n    // birthdate in 'YYYY-MM-DD' format\r\n    birthdate?: string\r\n    // READ ONLY FIELDS BELOW\r\n    // URL to channel\r\n    profile_url: string\r\n    // if the user hasn't choosen an avatar\r\n    has_default_avatar: boolean\r\n}",
            "properties": [
                {
                    "name": "about_bio",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "display_name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "facebook",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "facebook_url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "instagram",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "instagram_url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "is_public",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "primary_site",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tumblr_site",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "tumblr_url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "twitter",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "twitter_url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "user_type",
                    "type": "\"partner\" | \"artist\" | \"user\" | \"anonymous\"",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "website_url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "IPublicUser"
        },
        {
            "name": "IVideo",
            "id": "interface-IVideo-b9d57fc6b0ecd4b8c1b80877702b5c50",
            "file": "src/app/meme/models/GIF.model.ts",
            "type": "interface",
            "sourceCode": "import IUser from \"./user.model\";\r\n\r\nexport interface GIF {\r\n    type: 'video' | 'gif'\r\n    id: string \r\n    slug: string\r\n    url: string\r\n    bitly_gif_url: string\r\n    bitly_url: string\r\n    embed_url: string\r\n    username: string\r\n    source: string\r\n    rating: string\r\n    content_url: string\r\n    source_tld: string\r\n    source_post_url: string\r\n    is_indexable: boolean\r\n    is_sticker: boolean\r\n    import_datetime: string\r\n    trending_datetime: string\r\n    user: IUser\r\n    images: IImages\r\n    title: string\r\n    is_hidden: boolean\r\n    is_scheduled: boolean\r\n    is_removed: boolean\r\n    tags: string[]\r\n    bottle_data: IBottleData\r\n    analytics_response_payload: string\r\n    video?: IVideo\r\n    is_favorite: boolean\r\n}    \r\n\r\ninterface IBottleData {\r\n    tid?: string\r\n    tags?: string[]\r\n}\r\n\r\n\r\nexport interface IRendition {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface IImage extends IRendition {\r\n    url: string\r\n    size?: string\r\n}\r\n\r\nexport interface IURLAsset extends IImage {}\r\n\r\nexport interface IMP4 extends IRendition {\r\n    mp4: string\r\n    mp4_size: string\r\n}\r\n\r\nexport interface IWebP {\r\n    webp: string\r\n    webp_size: string\r\n}\r\n\r\nexport type ImageAllTypes = IImage & IWebP & IMP4\r\n\r\nexport interface IImages {\r\n    fixed_height_still: IImage\r\n    original_still: IImage\r\n    fixed_width: ImageAllTypes\r\n    fixed_height_small_still: IImage\r\n    fixed_height_downsampled: IImage & IWebP\r\n    preview: IImage\r\n    fixed_height_small: ImageAllTypes\r\n    downsized_still: IImage\r\n    downsized: IImage\r\n    downsized_large: IImage\r\n    fixed_width_small_still: IImage\r\n    preview_webp: IImage\r\n    fixed_width_still: IImage\r\n    fixed_width_small: ImageAllTypes\r\n    downsized_small: IImage & IMP4\r\n    fixed_width_downsampled: IImage & IWebP\r\n    downsized_medium: IImage\r\n    original: ImageAllTypes\r\n    fixed_height: ImageAllTypes\r\n    looping: IMP4\r\n    original_mp4: IMP4\r\n    preview_gif: IImage\r\n    '480w_still': IImage\r\n}\r\n\r\nexport interface IVideoAssets {\r\n    source: IURLAsset\r\n    '360p': IURLAsset\r\n    '480p': IURLAsset\r\n    '720p': IURLAsset\r\n    '1080p': IURLAsset\r\n    '4k': IURLAsset\r\n}\r\n\r\nexport default interface IVideo {\r\n    assets: IVideoAssets\r\n    description: string\r\n    dash_manifest_url: string\r\n    hls_manifest_url: string\r\n    previews: IImages\r\n}",
            "properties": [
                {
                    "name": "assets",
                    "type": "IVideoAssets",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "dash_manifest_url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "hls_manifest_url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "previews",
                    "type": "IImages",
                    "optional": false,
                    "description": "",
                    "line": 104
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IVideoAssets",
            "id": "interface-IVideoAssets-b9d57fc6b0ecd4b8c1b80877702b5c50",
            "file": "src/app/meme/models/GIF.model.ts",
            "type": "interface",
            "sourceCode": "import IUser from \"./user.model\";\r\n\r\nexport interface GIF {\r\n    type: 'video' | 'gif'\r\n    id: string \r\n    slug: string\r\n    url: string\r\n    bitly_gif_url: string\r\n    bitly_url: string\r\n    embed_url: string\r\n    username: string\r\n    source: string\r\n    rating: string\r\n    content_url: string\r\n    source_tld: string\r\n    source_post_url: string\r\n    is_indexable: boolean\r\n    is_sticker: boolean\r\n    import_datetime: string\r\n    trending_datetime: string\r\n    user: IUser\r\n    images: IImages\r\n    title: string\r\n    is_hidden: boolean\r\n    is_scheduled: boolean\r\n    is_removed: boolean\r\n    tags: string[]\r\n    bottle_data: IBottleData\r\n    analytics_response_payload: string\r\n    video?: IVideo\r\n    is_favorite: boolean\r\n}    \r\n\r\ninterface IBottleData {\r\n    tid?: string\r\n    tags?: string[]\r\n}\r\n\r\n\r\nexport interface IRendition {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface IImage extends IRendition {\r\n    url: string\r\n    size?: string\r\n}\r\n\r\nexport interface IURLAsset extends IImage {}\r\n\r\nexport interface IMP4 extends IRendition {\r\n    mp4: string\r\n    mp4_size: string\r\n}\r\n\r\nexport interface IWebP {\r\n    webp: string\r\n    webp_size: string\r\n}\r\n\r\nexport type ImageAllTypes = IImage & IWebP & IMP4\r\n\r\nexport interface IImages {\r\n    fixed_height_still: IImage\r\n    original_still: IImage\r\n    fixed_width: ImageAllTypes\r\n    fixed_height_small_still: IImage\r\n    fixed_height_downsampled: IImage & IWebP\r\n    preview: IImage\r\n    fixed_height_small: ImageAllTypes\r\n    downsized_still: IImage\r\n    downsized: IImage\r\n    downsized_large: IImage\r\n    fixed_width_small_still: IImage\r\n    preview_webp: IImage\r\n    fixed_width_still: IImage\r\n    fixed_width_small: ImageAllTypes\r\n    downsized_small: IImage & IMP4\r\n    fixed_width_downsampled: IImage & IWebP\r\n    downsized_medium: IImage\r\n    original: ImageAllTypes\r\n    fixed_height: ImageAllTypes\r\n    looping: IMP4\r\n    original_mp4: IMP4\r\n    preview_gif: IImage\r\n    '480w_still': IImage\r\n}\r\n\r\nexport interface IVideoAssets {\r\n    source: IURLAsset\r\n    '360p': IURLAsset\r\n    '480p': IURLAsset\r\n    '720p': IURLAsset\r\n    '1080p': IURLAsset\r\n    '4k': IURLAsset\r\n}\r\n\r\nexport default interface IVideo {\r\n    assets: IVideoAssets\r\n    description: string\r\n    dash_manifest_url: string\r\n    hls_manifest_url: string\r\n    previews: IImages\r\n}",
            "properties": [
                {
                    "name": "1080p",
                    "type": "IURLAsset",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "360p",
                    "type": "IURLAsset",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "480p",
                    "type": "IURLAsset",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "4k",
                    "type": "IURLAsset",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "720p",
                    "type": "IURLAsset",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "source",
                    "type": "IURLAsset",
                    "optional": false,
                    "description": "",
                    "line": 91
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IWebP",
            "id": "interface-IWebP-b9d57fc6b0ecd4b8c1b80877702b5c50",
            "file": "src/app/meme/models/GIF.model.ts",
            "type": "interface",
            "sourceCode": "import IUser from \"./user.model\";\r\n\r\nexport interface GIF {\r\n    type: 'video' | 'gif'\r\n    id: string \r\n    slug: string\r\n    url: string\r\n    bitly_gif_url: string\r\n    bitly_url: string\r\n    embed_url: string\r\n    username: string\r\n    source: string\r\n    rating: string\r\n    content_url: string\r\n    source_tld: string\r\n    source_post_url: string\r\n    is_indexable: boolean\r\n    is_sticker: boolean\r\n    import_datetime: string\r\n    trending_datetime: string\r\n    user: IUser\r\n    images: IImages\r\n    title: string\r\n    is_hidden: boolean\r\n    is_scheduled: boolean\r\n    is_removed: boolean\r\n    tags: string[]\r\n    bottle_data: IBottleData\r\n    analytics_response_payload: string\r\n    video?: IVideo\r\n    is_favorite: boolean\r\n}    \r\n\r\ninterface IBottleData {\r\n    tid?: string\r\n    tags?: string[]\r\n}\r\n\r\n\r\nexport interface IRendition {\r\n    width: number\r\n    height: number\r\n}\r\n\r\nexport interface IImage extends IRendition {\r\n    url: string\r\n    size?: string\r\n}\r\n\r\nexport interface IURLAsset extends IImage {}\r\n\r\nexport interface IMP4 extends IRendition {\r\n    mp4: string\r\n    mp4_size: string\r\n}\r\n\r\nexport interface IWebP {\r\n    webp: string\r\n    webp_size: string\r\n}\r\n\r\nexport type ImageAllTypes = IImage & IWebP & IMP4\r\n\r\nexport interface IImages {\r\n    fixed_height_still: IImage\r\n    original_still: IImage\r\n    fixed_width: ImageAllTypes\r\n    fixed_height_small_still: IImage\r\n    fixed_height_downsampled: IImage & IWebP\r\n    preview: IImage\r\n    fixed_height_small: ImageAllTypes\r\n    downsized_still: IImage\r\n    downsized: IImage\r\n    downsized_large: IImage\r\n    fixed_width_small_still: IImage\r\n    preview_webp: IImage\r\n    fixed_width_still: IImage\r\n    fixed_width_small: ImageAllTypes\r\n    downsized_small: IImage & IMP4\r\n    fixed_width_downsampled: IImage & IWebP\r\n    downsized_medium: IImage\r\n    original: ImageAllTypes\r\n    fixed_height: ImageAllTypes\r\n    looping: IMP4\r\n    original_mp4: IMP4\r\n    preview_gif: IImage\r\n    '480w_still': IImage\r\n}\r\n\r\nexport interface IVideoAssets {\r\n    source: IURLAsset\r\n    '360p': IURLAsset\r\n    '480p': IURLAsset\r\n    '720p': IURLAsset\r\n    '1080p': IURLAsset\r\n    '4k': IURLAsset\r\n}\r\n\r\nexport default interface IVideo {\r\n    assets: IVideoAssets\r\n    description: string\r\n    dash_manifest_url: string\r\n    hls_manifest_url: string\r\n    previews: IImages\r\n}",
            "properties": [
                {
                    "name": "webp",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "webp_size",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "loginResult",
            "id": "interface-loginResult-03d8c4d84ee2ffc784fbe4aefded27a3",
            "file": "src/app/auth/models/loginResult.model.ts",
            "type": "interface",
            "sourceCode": "export interface loginResult {\r\n    idToken: string;\r\n    email: string;\r\n    refreshToken:string;\r\n    expiresIn:\tstring;\r\n    localId: string;\r\n    kind?: string;\r\n    registered?: boolean;\r\n}",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "expiresIn",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "idToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "kind",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "localId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "refreshToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "registered",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MemeState",
            "id": "interface-MemeState-704756e9071ec7bb086d4855ddc4eb6a",
            "file": "src/app/meme/reducers/index.ts",
            "type": "interface",
            "sourceCode": "import {\r\n    createSelector,\r\n    createFeatureSelector,\r\n    combineReducers,\r\n    Action,\r\n} from '@ngrx/store';\r\nimport * as fromRoot from '../../store/app.reducer';\r\nimport * as fromMeme from './meme.reducer';\r\nimport * as fromFavorites from './favorites.reducer';\r\n\r\nexport const memeFeatureKey = 'meme';\r\n\r\nexport interface MemeState {\r\n    [fromMeme.memeFeatureKey]: fromMeme.State;\r\n    [fromFavorites.favoriteFeatureKey]: fromFavorites.State\r\n}\r\n\r\nexport interface State extends fromRoot.State {\r\n    [memeFeatureKey]: MemeState;\r\n}\r\n\r\n/** Provide reducer in AoT-compilation happy way */\r\nexport function reducers(state: MemeState | undefined, action: Action) {\r\n    return combineReducers({\r\n        [fromMeme.memeFeatureKey]: fromMeme.reducer,\r\n        [fromFavorites.favoriteFeatureKey]: fromFavorites.reducer\r\n    })(state, action);\r\n}\r\n\r\n/* The createFeatureSelector function selects a piece of state from the root of the state object.\r\n* This is used for selecting feature states that are loaded eagerly or lazily.\r\n*/\r\nexport const selectMemesState = createFeatureSelector<State, MemeState>(\r\n    memeFeatureKey\r\n);\r\n\r\nexport const selectMemeState = createSelector(\r\n    selectMemesState,\r\n    (state) => state.meme\r\n);\r\n\r\nexport const selectMemeLoading = createSelector(\r\n    selectMemeState,\r\n    fromMeme.getLoading\r\n);\r\n\r\nexport const selectMemeError = createSelector(\r\n    selectMemeState,\r\n    fromMeme.getError\r\n);\r\n\r\nexport const selectMemeOffset = createSelector(\r\n    selectMemeState,\r\n    fromMeme.getOffset\r\n);\r\n\r\nexport const selectMemeSearch = createSelector(\r\n    selectMemeState,\r\n    fromMeme.getSearch\r\n);\r\n\r\n\r\n\r\nexport const selectMemeSelectedId = createSelector(\r\n    selectMemeState,\r\n    fromMeme.getSelectedId\r\n);\r\n\r\nexport const selectMemeIds = createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeIds // shorthand for usersState => fromUser.selectUserIds(usersState)\r\n);\r\n\r\nexport const selectMemeEntities = createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeEntities\r\n);\r\n\r\nexport const selectAllMemes = createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectAllMemes\r\n);\r\n\r\nexport const selectMemeTotal = createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeTotal\r\n);\r\n\r\nexport const selectCurrentMeme = createSelector(\r\n    selectMemeEntities,\r\n    selectMemeSelectedId,\r\n    (memeEntities, memeId) => memeEntities[memeId]\r\n);\r\n\r\nexport const selectMemeAndTotalSearch = createSelector(\r\n    selectMemeSearch,\r\n    selectMemeTotal,\r\n    (term, total) => { return {term, total}}\r\n);\r\n\r\n\r\n// Favorites\r\n\r\nexport const selectFavoriteState = createSelector(\r\n    selectMemesState,\r\n    (state) => state.favorites\r\n);\r\n\r\nexport const selectFavoritesIds = createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteIds    \r\n);\r\n\r\nexport const selectFavoritesEntities = createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteEntities\r\n);\r\n\r\nexport const selectAllFavorites = createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectAllFavorites\r\n);\r\n\r\nexport const selectFavoritesTotal = createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteTotal\r\n);\r\n\r\n\r\n\r\nexport const selectMemesWithFavorites = createSelector(\r\n    selectAllMemes,\r\n    selectFavoritesIds,\r\n    (memes, favorites: Array<string>) =>  memes.map(a => ({\r\n        ...a,\r\n        is_favorite: favorites.includes(a.id as string)   \r\n    }))\r\n)\r\n\r\nexport const selectFavoritesIdsAsStringArray = createSelector(\r\n    selectFavoritesIds,\r\n    (ids: Array<string>) => ids \r\n)\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "type": "fromMeme.State",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "type": "fromFavorites.State",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-3392eef4400ae9f2e39e75a73a29b85b",
            "file": "src/app/store/app.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Action, ActionReducer, ActionReducerMap, createFeatureSelector, MetaReducer } from '@ngrx/store';\r\nimport * as fromRouter from '@ngrx/router-store';\r\nimport { InjectionToken } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n/**\r\n * As mentioned, we treat each reducer like a table in a database. This means\r\n * our top level state interface is just a map of keys to inner state types.\r\n */\r\nexport interface State {\r\n    router: fromRouter.RouterReducerState<any>;\r\n}\r\n\r\n/**\r\n * Our state is composed of a map of action reducer functions.\r\n * These reducer functions are called with each dispatched action\r\n * and the current or initial state and return a new immutable state.\r\n */\r\n export const ROOT_REDUCERS = new InjectionToken<\r\n ActionReducerMap<State, Action>\r\n>('Root reducers token', {\r\n factory: () => ({   \r\n   router: fromRouter.routerReducer,\r\n }),\r\n});\r\n\r\n// export const appReducer: ActionReducerMap<State> = {\r\n    \r\n// }\r\n\r\n// console.log all actions\r\nexport function logger(reducer: ActionReducer<State>): ActionReducer<State> {\r\n    return (state, action) => {\r\n      const result = reducer(state, action);\r\n      console.groupCollapsed(action.type);\r\n      console.log('prev state', state);\r\n      console.log('action', action);\r\n      console.log('next state', result);\r\n      console.groupEnd();\r\n  \r\n      return result;\r\n    };\r\n  }\r\n\r\n  /*\r\n    Reset ngrx state if someone logs out\r\n  */\r\n  export function clearState(reducer: ActionReducer<State>): ActionReducer<State> {\r\n    return function(state: State, action: Action): State {\r\n      if (action.type === '[Auth] Logout') {\r\n        state = undefined;\r\n      }\r\n      return reducer(state, action);\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * By default, @ngrx/store uses combineReducers with the reducer map to compose\r\n   * the root meta-reducer. To add more meta-reducers, provide an array of meta-reducers\r\n   * that will be composed to form the root meta-reducer.\r\n   */\r\n  export const metaReducers: MetaReducer<State>[] = !environment.production\r\n    ? [logger,clearState]\r\n    : [clearState];\r\n  \r\n\r\n\r\n/**\r\n * Router Selectors\r\n */\r\n export const selectRouter = createFeatureSelector<\r\n State,\r\n fromRouter.RouterReducerState\r\n>('router');\r\n\r\nexport const { selectRouteData } = fromRouter.getSelectors(selectRouter);",
            "properties": [
                {
                    "name": "router",
                    "type": "fromRouter.RouterReducerState<any>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "description": "<p>As mentioned, we treat each reducer like a table in a database. This means\nour top level state interface is just a map of keys to inner state types.</p>\n",
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-44b9f142f12638182eb4f01f7c7c97cc-1",
            "file": "src/app/charting/reducers/charting.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on} from \"@ngrx/store\";\r\nimport * as ChartingActions from '../actions/charting.actions';\r\nimport { CovidData } from \"../models/CovidData.model\";\r\nimport { CovidChartTypes } from \"../models/CovidChartTypes\";\r\n\r\n\r\nexport interface State {    \r\n    everLoaded: boolean;    \r\n    error: string;\r\n    loading: boolean;\r\n    covidData: CovidData[]\r\n    selected: string;\r\n    startDate: string;\r\n    endDate: string;\r\n    selectedType: string;\r\n};\r\n\r\nexport const initialState : State = {\r\n    everLoaded: false,\r\n    error: null,\r\n    loading: false,\r\n    covidData: [],    \r\n    selected: 'US',\r\n    startDate: '01/01/2020',\r\n    endDate: '03/08/2021',\r\n    selectedType:  CovidChartTypes.Deaths\r\n}\r\n\r\nexport const chartingFeatureKey = 'charting'; \r\n\r\nexport const reducer = createReducer(\r\n    initialState,\r\n    on(ChartingActions.GET_COVID_DATA_START, state => ({ ...state, loading: true })),\r\n    on(ChartingActions.GET_COVID_DATA_SUCCESS, (state, action) => ({...state, loading: false, everLoaded: true, covidData: [...action.data]})),\r\n    on(ChartingActions.GET_COVID_DATA_FAILURE,(state, action) => ({...state, loading: false, error: action.errorMsg})),\r\n    on(ChartingActions.SET_DATE_RANGE,(state,action)=>({...state,startDate: action.sd, endDate: action.ed})),\r\n    on(ChartingActions.SET_START_DATE,(state,action)=>({...state,startDate: action.sd})),\r\n    on(ChartingActions.SET_END_DATE,(state,action)=>({...state,endDate: action.ed})),\r\n    on(ChartingActions.SET_CURRENT_SELECTION,(state,action) => ({...state, loading: true,selected: action.selection}))\r\n);\r\n\r\nexport const getEverLoaded = (state: State) => state.everLoaded;\r\nexport const getLoading = (state: State) => state.loading;\r\nexport const getError = (state: State) => state.error;\r\nexport const getCovidData = (state: State) => state.covidData;\r\nexport const getStartDate = (state: State) => state.startDate;\r\nexport const getEndDate = (state: State) => state.endDate;\r\nexport const getSelected = (state: State) => state.selected;\r\nexport const getSelectedType = (state: State) => state.selectedType;",
            "properties": [
                {
                    "name": "covidData",
                    "type": "CovidData[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "endDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "everLoaded",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "selected",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selectedType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "startDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-5a7f14a647d8f3839e006ee507aad763-2",
            "file": "src/app/charting/reducers/index.ts",
            "type": "interface",
            "sourceCode": "import * as moment from 'moment/moment';\r\n\r\nimport {\r\n  createSelector,\r\n  createFeatureSelector,\r\n  combineReducers,\r\n  Action,\r\n} from '@ngrx/store';\r\n\r\nimport * as fromCharting from './charting.reducer';\r\nimport * as fromRoot from '../../store/app.reducer';\r\nimport { CovidData } from \"../models/CovidData.model\";\r\nimport { state_hash } from 'src/app/core/states';\r\nimport { CovidChartTypes } from '../models/CovidChartTypes';\r\n\r\nexport const chartFeatureKey = 'chart';\r\n\r\nexport interface ChartState {\r\n  [fromCharting.chartingFeatureKey]: fromCharting.State;\r\n}\r\n\r\nexport interface State extends fromRoot.State {\r\n  [chartFeatureKey]: ChartState;\r\n}\r\n\r\n/** Provide reducer in AoT-compilation happy way */\r\nexport function reducers(state: ChartState | undefined, action: Action) {\r\n  return combineReducers({\r\n    [fromCharting.chartingFeatureKey]: fromCharting.reducer\r\n  })(state, action);\r\n}\r\n\r\n/**\r\n* The createFeatureSelector function selects a piece of state from the root of the state object.\r\n* This is used for selecting feature states that are loaded eagerly or lazily.\r\n*/\r\nexport const selectChartState = createFeatureSelector<State, ChartState>(\r\n  chartFeatureKey\r\n);\r\n\r\nexport const selectChartingState = createSelector(\r\n  selectChartState,\r\n  (state) => state.charting\r\n);\r\n\r\nexport const selectChartingLoading = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getLoading\r\n);\r\n\r\nexport const selectChartingEverLoaded = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getEverLoaded\r\n);\r\n\r\nexport const selectChartingError = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getError\r\n);\r\n\r\nexport const selectCovidData = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getCovidData\r\n);\r\n\r\nexport const selectSelected = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getSelected\r\n);\r\n\r\nexport const selectSelectedType = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getSelectedType\r\n);\r\n\r\nexport const selectStartDate = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getStartDate\r\n);\r\n\r\nexport const selectEndDate = createSelector(\r\n  selectChartingState,\r\n  fromCharting.getEndDate\r\n);\r\n\r\nexport const selectEndDateToDate = createSelector(\r\n  selectEndDate,\r\n  (d: string) => { return new Date(d) }\r\n)\r\n\r\nexport const selectStartDateToDate = createSelector(\r\n  selectStartDate,\r\n  (d: string) => { return new Date(d) }\r\n)\r\n\r\nexport const selectAllChartingData = createSelector(\r\n  selectCovidData,\r\n  selectStartDateToDate,\r\n  selectEndDateToDate,\r\n  (d: CovidData[], sd: Date, ed: Date) => {\r\n    const dateFilteredData = d.filter((a) => { return a.date >= sd && a.date <= ed });\r\n    return {\r\n      [CovidChartTypes.Deaths]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Deaths)), label: CovidData.getLabel(CovidChartTypes.Deaths), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Deaths, true)), label: CovidData.getLabel(CovidChartTypes.Deaths, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Hospitalized]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Hospitalized)), label: CovidData.getLabel(CovidChartTypes.Hospitalized), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Hospitalized, true)), label: CovidData.getLabel(CovidChartTypes.Hospitalized, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Infections]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Infections)), label: CovidData.getLabel(CovidChartTypes.Infections), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Infections, true)), label: CovidData.getLabel(CovidChartTypes.Infections, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Tests]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Tests)), label: CovidData.getLabel(CovidChartTypes.Tests), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Tests, true)), label: CovidData.getLabel(CovidChartTypes.Tests, true), type: \"bar\", yAxisID: 'right-axis' }]\r\n    }\r\n  }\r\n)\r\n\r\nexport const selectChartingDataForDeaths = createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Deaths];\r\n  }\r\n)\r\n\r\nexport const selectChartingDataForInfected = createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Infections];\r\n  }\r\n)\r\n\r\nexport const selectChartingDataForHospitalized = createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Hospitalized];\r\n  }\r\n)\r\n\r\nexport const selectChartingDataForTests = createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Tests];\r\n  }\r\n)\r\n\r\nexport const selectChartingDataForSelected = createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[st];\r\n  }\r\n)\r\n\r\nexport const selectChartingChartLabels = createSelector(\r\n  selectCovidData,\r\n  selectStartDateToDate,\r\n  selectEndDateToDate,\r\n  (d: CovidData[], sd: Date, ed: Date) => { return d.filter((a) => { return a.date >= sd && a.date <= ed }).map(i => moment(i.date)) }\r\n)\r\n\r\nexport const selectChartTitle = createSelector(\r\n  selectSelected,\r\n  selectSelectedType,\r\n  (selected: string, selectedType: string) => `${selectedType} for ${state_hash[selected]}`\r\n)",
            "properties": [
                {
                    "name": "chartFeatureKey",
                    "type": "ChartState",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "State",
            "id": "interface-State-385baa3b05ed8382fb5868a4ca9a4ab3-3",
            "file": "src/app/auth/reducers/auth.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\r\nimport { User } from 'src/app/models/user.model';\r\nimport * as AuthActions from '../actions/auth.actions';\r\n\r\nexport interface State {\r\n    user: User;    \r\n    loading: boolean; \r\n    loggedIn: boolean;\r\n    errorMsg: string;\r\n};\r\n\r\nconst initialState: State = {\r\n    user: null,\r\n    loading: false,\r\n    loggedIn: false,\r\n    errorMsg: null\r\n};\r\n\r\nexport const authStateFeatureKey = 'authState'; \r\n\r\nexport const getUser = (state: State) => state.user;\r\nexport const getLoggedIn = (state: State) => state.loggedIn;\r\nexport const getLoading = (state: State) => state.loading;\r\nexport const getError = (state: State) => state.errorMsg;\r\n\r\nexport const reducer = createReducer(\r\n    initialState,\r\n    on(\r\n        AuthActions.SIGNUP_START,\r\n        (state) => ({...state, loading: true, errorMsg: initialState.errorMsg}),\r\n    ),    \r\n    on(\r\n        AuthActions.LOGIN_START,\r\n        (state) => ({...state, loading: true, errorMsg: initialState.errorMsg}),\r\n    ),\r\n    on(\r\n        AuthActions.LOGIN_SUCCESS,\r\n        (state, action) => ({...state, user: action.user, loading: false, loggedIn: true, errorMsg: initialState.errorMsg}),\r\n    ),  \r\n    on(\r\n        AuthActions.AUTOLOGIN_SUCCESS,\r\n        (state, action) => ({...state, user: action.user, loading: false, loggedIn: true, errorMsg: initialState.errorMsg}),\r\n    ),      \r\n    on(\r\n        AuthActions.LOGOUT,\r\n        (state) => ({...initialState})\r\n    ),\r\n    on(\r\n        AuthActions.LOGIN_FAILURE,\r\n        (state, action) => ({...state, loading: false, errorMsg: action.error})\r\n    )\r\n);",
            "properties": [
                {
                    "name": "errorMsg",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loggedIn",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "State-3"
        },
        {
            "name": "State",
            "id": "interface-State-45f21bb5add686fe2642572f59f6ef3f-4",
            "file": "src/app/auth/reducers/index.ts",
            "type": "interface",
            "sourceCode": "import {\r\n    createSelector,\r\n    createFeatureSelector,\r\n    combineReducers,\r\n    Action,\r\n} from '@ngrx/store';\r\nimport * as fromAuth from './auth.reducer';\r\nimport * as fromRoot from '../../store/app.reducer';\r\n\r\nexport const authFeatureKey = 'auth';\r\n\r\nexport interface AuthState {\r\n    [fromAuth.authStateFeatureKey]: fromAuth.State;\r\n}\r\n\r\nexport interface State extends fromRoot.State {\r\n    [authFeatureKey]: AuthState;\r\n}\r\n\r\n  /** Provide reducer in AoT-compilation happy way */\r\n  export function reducers(state: AuthState | undefined, action: Action) {\r\n    return combineReducers({      \r\n      [fromAuth.authStateFeatureKey]: fromAuth.reducer      \r\n    })(state, action);\r\n  }\r\n\r\n  \r\n  /**\r\n * The createFeatureSelector function selects a piece of state from the root of the state object.\r\n * This is used for selecting feature states that are loaded eagerly or lazily.\r\n */\r\nexport const selectChartFeatureState = createFeatureSelector<State, AuthState>(\r\n    authFeatureKey\r\n);\r\n\r\nexport const selectAuthState = createSelector(\r\n    selectChartFeatureState,\r\n    (state) => state.authState\r\n  );\r\n\r\n  export const selectAuthLoading = createSelector(\r\n    selectAuthState,\r\n    fromAuth.getLoading\r\n  );   \r\n\r\n  export const selectAuthError = createSelector(\r\n    selectAuthState,\r\n    fromAuth.getError\r\n  );     \r\n\r\n  export const selectAuthLoggedIn = createSelector(\r\n    selectAuthState,\r\n    fromAuth.getLoggedIn\r\n  );   \r\n\r\n  export const selectAuthUser = createSelector(\r\n    selectAuthState,\r\n    fromAuth.getUser\r\n  ); ",
            "properties": [
                {
                    "name": "authFeatureKey",
                    "type": "AuthState",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "State-4"
        },
        {
            "name": "State",
            "id": "interface-State-5f31923b5c14ffdb4ba002c802a4c362-5",
            "file": "src/app/meme/reducers/favorites.reducer.ts",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from \"@ngrx/entity\";\r\nimport { Action, createReducer, on } from \"@ngrx/store\";\r\nimport { GIF } from \"../models/GIF.model\";\r\nimport * as FavoritesActions from '../actions/favorites.actions';\r\n\r\nexport interface State extends EntityState<GIF> {\r\n     \r\n}\r\n\r\nexport const adapter: EntityAdapter<GIF> = createEntityAdapter<GIF>({});\r\n\r\nexport const initialState: State = adapter.getInitialState({\r\n    entities: {},\r\n    ids: []   \r\n});\r\n\r\nexport const favoriteFeatureKey = 'favorites';\r\n\r\nconst favoriteReducer = createReducer(\r\n    initialState,\r\n    on(FavoritesActions.FAVORITE_ADD, (state, action) => (adapter.addOne(action.data,{...state}))),        \r\n    on(FavoritesActions.FAVORITE_REMOVE, (state, action) => (adapter.removeOne(action.id, {...state})))\r\n);\r\n\r\nexport function reducer(state: State | undefined, action: Action) {\r\n    return favoriteReducer(state, action);\r\n}\r\n\r\n// get the selectors\r\nconst {\r\n    selectIds,\r\n    selectEntities,\r\n    selectAll,\r\n    selectTotal,\r\n  } = adapter.getSelectors();\r\n   \r\n  // select the array of meme ids\r\n  export const selectFavoriteIds = selectIds;\r\n   \r\n  // select the dictionary of meme entities\r\n  export const selectFavoriteEntities = selectEntities;\r\n   \r\n  // select the array of memes\r\n  export const selectAllFavorites = selectAll;\r\n   \r\n  // select the total meme count\r\n  export const selectFavoriteTotal = selectTotal;",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 5,
            "duplicateName": "State-5"
        },
        {
            "name": "State",
            "id": "interface-State-704756e9071ec7bb086d4855ddc4eb6a-6",
            "file": "src/app/meme/reducers/index.ts",
            "type": "interface",
            "sourceCode": "import {\r\n    createSelector,\r\n    createFeatureSelector,\r\n    combineReducers,\r\n    Action,\r\n} from '@ngrx/store';\r\nimport * as fromRoot from '../../store/app.reducer';\r\nimport * as fromMeme from './meme.reducer';\r\nimport * as fromFavorites from './favorites.reducer';\r\n\r\nexport const memeFeatureKey = 'meme';\r\n\r\nexport interface MemeState {\r\n    [fromMeme.memeFeatureKey]: fromMeme.State;\r\n    [fromFavorites.favoriteFeatureKey]: fromFavorites.State\r\n}\r\n\r\nexport interface State extends fromRoot.State {\r\n    [memeFeatureKey]: MemeState;\r\n}\r\n\r\n/** Provide reducer in AoT-compilation happy way */\r\nexport function reducers(state: MemeState | undefined, action: Action) {\r\n    return combineReducers({\r\n        [fromMeme.memeFeatureKey]: fromMeme.reducer,\r\n        [fromFavorites.favoriteFeatureKey]: fromFavorites.reducer\r\n    })(state, action);\r\n}\r\n\r\n/* The createFeatureSelector function selects a piece of state from the root of the state object.\r\n* This is used for selecting feature states that are loaded eagerly or lazily.\r\n*/\r\nexport const selectMemesState = createFeatureSelector<State, MemeState>(\r\n    memeFeatureKey\r\n);\r\n\r\nexport const selectMemeState = createSelector(\r\n    selectMemesState,\r\n    (state) => state.meme\r\n);\r\n\r\nexport const selectMemeLoading = createSelector(\r\n    selectMemeState,\r\n    fromMeme.getLoading\r\n);\r\n\r\nexport const selectMemeError = createSelector(\r\n    selectMemeState,\r\n    fromMeme.getError\r\n);\r\n\r\nexport const selectMemeOffset = createSelector(\r\n    selectMemeState,\r\n    fromMeme.getOffset\r\n);\r\n\r\nexport const selectMemeSearch = createSelector(\r\n    selectMemeState,\r\n    fromMeme.getSearch\r\n);\r\n\r\n\r\n\r\nexport const selectMemeSelectedId = createSelector(\r\n    selectMemeState,\r\n    fromMeme.getSelectedId\r\n);\r\n\r\nexport const selectMemeIds = createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeIds // shorthand for usersState => fromUser.selectUserIds(usersState)\r\n);\r\n\r\nexport const selectMemeEntities = createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeEntities\r\n);\r\n\r\nexport const selectAllMemes = createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectAllMemes\r\n);\r\n\r\nexport const selectMemeTotal = createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeTotal\r\n);\r\n\r\nexport const selectCurrentMeme = createSelector(\r\n    selectMemeEntities,\r\n    selectMemeSelectedId,\r\n    (memeEntities, memeId) => memeEntities[memeId]\r\n);\r\n\r\nexport const selectMemeAndTotalSearch = createSelector(\r\n    selectMemeSearch,\r\n    selectMemeTotal,\r\n    (term, total) => { return {term, total}}\r\n);\r\n\r\n\r\n// Favorites\r\n\r\nexport const selectFavoriteState = createSelector(\r\n    selectMemesState,\r\n    (state) => state.favorites\r\n);\r\n\r\nexport const selectFavoritesIds = createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteIds    \r\n);\r\n\r\nexport const selectFavoritesEntities = createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteEntities\r\n);\r\n\r\nexport const selectAllFavorites = createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectAllFavorites\r\n);\r\n\r\nexport const selectFavoritesTotal = createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteTotal\r\n);\r\n\r\n\r\n\r\nexport const selectMemesWithFavorites = createSelector(\r\n    selectAllMemes,\r\n    selectFavoritesIds,\r\n    (memes, favorites: Array<string>) =>  memes.map(a => ({\r\n        ...a,\r\n        is_favorite: favorites.includes(a.id as string)   \r\n    }))\r\n)\r\n\r\nexport const selectFavoritesIdsAsStringArray = createSelector(\r\n    selectFavoritesIds,\r\n    (ids: Array<string>) => ids \r\n)\r\n\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "memeFeatureKey",
                    "type": "MemeState",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 6,
            "duplicateName": "State-6"
        },
        {
            "name": "State",
            "id": "interface-State-9402227779e54265eaf3f9dd6966549a-7",
            "file": "src/app/meme/reducers/meme.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from \"@ngrx/store\";\r\nimport { GIF } from \"../models/GIF.model\";\r\nimport { GiphyPagination } from \"../models/pagination.model\";\r\nimport * as MemeActions from \"../actions/meme.actions\";\r\nimport { createEntityAdapter, EntityAdapter, EntityState } from \"@ngrx/entity\";\r\n\r\n\r\n\r\nexport interface State extends EntityState<GIF> {\r\n    pagination: GiphyPagination,\r\n    search: string,\r\n    loading: boolean,\r\n    error: string,    \r\n    selectedId: string;    \r\n}\r\n\r\nexport const adapter: EntityAdapter<GIF> = createEntityAdapter<GIF>({});\r\n\r\nexport const initialState: State = adapter.getInitialState({\r\n    entities: {},\r\n    ids: [],\r\n    pagination: { offset: 0, total_count: 0, count: 0, },\r\n    search: \"\",\r\n    loading: false,\r\n    error: \"\",\r\n    selectedId: null\r\n});\r\n\r\nexport const memeFeatureKey = 'meme';\r\n\r\nconst memeReducer = createReducer(\r\n    initialState,\r\n    on(MemeActions.MEME_TRENDING_START, (state) => ({ ...state, loading: true })),\r\n    on(MemeActions.MEME_TRENDING_FINISH , (state, action) => (adapter.addMany(action.data, { ...state, pagination: { ...action.pagination }, loading: false }))),\r\n    on(MemeActions.MEME_SET_ID, (state, action) => ({...state, selectedId: action.id})),\r\n    on(MemeActions.MEME_CLEAR_ITEMS_THEN_SEARCH , (state) => (adapter.removeAll({...state, pagination: initialState.pagination, search: initialState.search}))),\r\n    on(MemeActions.MEME_CLEAR_ITEMS , (state) => (adapter.removeAll({...state, pagination: initialState.pagination, search: initialState.search}))),\r\n    on(MemeActions.MEME_SET_SEARCH, (state, action) => ({...state, search: action.search})),\r\n    on(MemeActions.MEME_SEARCH_START, (state) => ({...state, loading: true})),    \r\n    on(MemeActions.MEME_SEARCH_FINISH , (state, action) => (adapter.addMany(action.data, { ...state, pagination: { ...action.pagination }, loading: false }))),\r\n);\r\n\r\nexport function reducer(state: State | undefined, action: Action) {\r\n    return memeReducer(state, action);\r\n}\r\n\r\nexport const getLoading = (state: State) => state.loading;\r\nexport const getOffset = (state: State) => state.pagination.offset;\r\nexport const getCount = (state: State) => state.pagination.count;\r\nexport const getTotalCount = (state: State) => state.pagination.total_count;\r\nexport const getSearch = (state: State) => state.search;\r\nexport const getError = (state: State) => state.error;\r\nexport const getSelectedId = (state: State) => state.selectedId;\r\n\r\n\r\n// get the selectors\r\nconst {\r\n    selectIds,\r\n    selectEntities,\r\n    selectAll,\r\n    selectTotal,\r\n  } = adapter.getSelectors();\r\n   \r\n  // select the array of meme ids\r\n  export const selectMemeIds = selectIds;\r\n   \r\n  // select the dictionary of meme entities\r\n  export const selectMemeEntities = selectEntities;\r\n   \r\n  // select the array of memes\r\n  export const selectAllMemes = selectAll;\r\n   \r\n  // select the total meme count\r\n  export const selectMemeTotal = selectTotal;",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "loading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "pagination",
                    "type": "GiphyPagination",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "search",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selectedId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 7,
            "duplicateName": "State-7"
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-cb8840b069a9c383d7d3ea20e9eaa5c9",
            "file": "src/app/auth/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "autoLoginStart$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    ofType(AuthActions.AUTOLOGIN_START),\r\n    map(() => {\r\n      const loadedUser = this.authService.autoLogin();\r\n      if (loadedUser?.token){\r\n        return AuthActions.AUTOLOGIN_SUCCESS({user: loadedUser})\r\n      } else {\r\n        return AuthActions.LOGOUT();\r\n      }\r\n    })\r\n  ))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "loginSuccess$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    ofType(AuthActions.LOGIN_SUCCESS),\r\n    tap(() => this.router.navigate(['/']))\r\n  ), { dispatch: false })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "notLoggedIn$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    ofType(AuthActions.NOT_LOGGED_IN),\r\n    tap(() => this.router.navigate(['/auth']))\r\n  ), { dispatch: false })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "startLogin$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    // only continue in this observable chain if of the type\r\n    // of the below observable\r\n    ofType(AuthActions.LOGIN_START),\r\n    // grab the signup out and pass it down the observable chain\r\n    map((action) => action.signup),\r\n    //\r\n    exhaustMap((auth: loginUser) =>\r\n      this.authService.login(auth.email, auth.password).pipe(\r\n        // map the response to a new login_success action \r\n        // map wraps the return value with an observable\r\n        map((response) => {\r\n          const user = this.authService.handleAuthentication(response);\r\n          return AuthActions.LOGIN_SUCCESS({ user });\r\n        }),\r\n        // get any errors and return a login_failure  \r\n        // wrap return value in of() to ensure you return an observable and \r\n        // don't break the observable chain\r\n        catchError((error) => of(AuthActions.LOGIN_FAILURE({ error: this.authService.handleError(error) })))\r\n      )\r\n    )\r\n  ))",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\r\nimport { AuthService } from '../auth.service';\r\nimport { loginUser } from '../models/loginUser.model';\r\nimport * as AuthActions from '../actions/auth.actions';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthEffects {\r\n  constructor(private actions$: Actions, private authService: AuthService, private router: Router) { }\r\n\r\n  //debugging logger, would of course be removed in production\r\n//   logActions$ = createEffect(() =>\r\n//     this.actions$.pipe(\r\n//       tap((action) =>{\r\n//        console.log(action);\r\n//       })\r\n//     ), { dispatch: false });  \r\n\r\n  startLogin$ = createEffect(() => this.actions$.pipe(\r\n    // only continue in this observable chain if of the type\r\n    // of the below observable\r\n    ofType(AuthActions.LOGIN_START),\r\n    // grab the signup out and pass it down the observable chain\r\n    map((action) => action.signup),\r\n    //\r\n    exhaustMap((auth: loginUser) =>\r\n      this.authService.login(auth.email, auth.password).pipe(\r\n        // map the response to a new login_success action \r\n        // map wraps the return value with an observable\r\n        map((response) => {\r\n          const user = this.authService.handleAuthentication(response);\r\n          return AuthActions.LOGIN_SUCCESS({ user });\r\n        }),\r\n        // get any errors and return a login_failure  \r\n        // wrap return value in of() to ensure you return an observable and \r\n        // don't break the observable chain\r\n        catchError((error) => of(AuthActions.LOGIN_FAILURE({ error: this.authService.handleError(error) })))\r\n      )\r\n    )\r\n  ));\r\n\r\n  loginSuccess$ = createEffect(() => this.actions$.pipe(\r\n    ofType(AuthActions.LOGIN_SUCCESS),\r\n    tap(() => this.router.navigate(['/']))\r\n  ), { dispatch: false });\r\n\r\n  notLoggedIn$ = createEffect(() => this.actions$.pipe(\r\n    ofType(AuthActions.NOT_LOGGED_IN),\r\n    tap(() => this.router.navigate(['/auth']))\r\n  ), { dispatch: false });  \r\n\r\n      \r\n\r\n  autoLoginStart$ = createEffect(() => this.actions$.pipe(\r\n    ofType(AuthActions.AUTOLOGIN_START),\r\n    map(() => {\r\n      const loadedUser = this.authService.autoLogin();\r\n      if (loadedUser?.token){\r\n        return AuthActions.AUTOLOGIN_SUCCESS({user: loadedUser})\r\n      } else {\r\n        return AuthActions.LOGOUT();\r\n      }\r\n    })\r\n  ));\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-b5d7730544887d19a22c7a0beea56cb1",
            "file": "src/app/auth/auth.service.ts",
            "properties": [
                {
                    "name": "subscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "timer",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "autoLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "autoLogout",
                    "args": [
                        {
                            "name": "exiprationDuration",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "exiprationDuration",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "handleAuthentication",
                    "args": [
                        {
                            "name": "res",
                            "type": "loginResult"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "loginResult",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "errorResponse",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "errorResponse",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { User } from 'src/app/models/user.model';\r\nimport { environment } from 'src/environments/environment';\r\nimport { loginUser } from './models/loginUser.model';\r\nimport { loginResult } from './models/loginResult.model';\r\nimport * as fromApp from '../store/app.reducer';\r\nimport * as AuthActions from './actions/auth.actions';\r\nimport * as fromAuth from './reducers';\r\nimport { Store } from '@ngrx/store';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService implements OnDestroy {  \r\n  subscription: Subscription;\r\n  private timer: any = null;  \r\n\r\n  constructor(private http: HttpClient, private router: Router, private store: Store<fromApp.State>) {\r\n    this.subscription = this.store.select(fromAuth.selectAuthUser).subscribe((user) => {\r\n      this.clearTimer();\r\n      if (user){\r\n        this.autoLogout(user.expirationMilliseconds);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {}\r\n\r\n  login(email: string, password: string) {\r\n    return this.http\r\n      .post<loginResult>(environment.signInURL, new loginUser(email, password)); \r\n  }\r\n\r\n  logout() {  \r\n    localStorage.removeItem('user');\r\n    this.clearTimer() ;\r\n    this.store.dispatch(AuthActions.LOGOUT());\r\n    this.router.navigate(['/auth']);\r\n  }\r\n\r\n  clearTimer() {\r\n    if (this.timer) {\r\n      clearTimeout(this.timer);\r\n      this.timer = null;\r\n    }\r\n  }\r\n\r\n  autoLogout(exiprationDuration: number) {\r\n    this.timer = setTimeout(() => {\r\n      this.logout();\r\n    }, exiprationDuration);\r\n  }\r\n\r\n  autoLogin() {\r\n    const userData = JSON.parse(localStorage.getItem('user'));\r\n    if (!userData) {\r\n      return;\r\n    }\r\n    const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\r\n    return loadedUser;\r\n  }\r\n\r\n  handleAuthentication(res: loginResult) {\r\n    const expirationDate = new Date(new Date().getTime() + +res.expiresIn * 1000);\r\n    const user = new User(res.email, res.localId, res.idToken, expirationDate);\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n    return user;        \r\n  }\r\n\r\n  handleError(errorResponse: HttpErrorResponse) {\r\n    let errorMsg = \"An error has occurred.\";\r\n    switch (errorResponse?.error?.error?.message) {\r\n      case \"EMAIL_EXISTS\":\r\n        errorMsg = \"Email already exists\";\r\n        break;\r\n      case \"OPERATION_NOT_ALLOWED\":\r\n        errorMsg = \"Sign in disabled for this project\";\r\n        break;\r\n      case \"TOO_MANY_ATTEMPTS_TRY_LATER\":\r\n        errorMsg = \"Too many attempts, try later\";\r\n        break;\r\n      case \"EMAIL_NOT_FOUND\":\r\n        errorMsg = \"Email not found\"\r\n        break;\r\n      case \"INVALID_PASSWORD\":\r\n        errorMsg = \"Password is invalid\"\r\n        break;\r\n      case \"USER_DISABLED\":\r\n        errorMsg = \"User is disabled\"\r\n        break;\r\n    }\r\n    return errorMsg;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromApp.State>"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromApp.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ChartingEffects",
            "id": "injectable-ChartingEffects-3d116f5b08662d0fbd05406a5c4e4b8b",
            "file": "src/app/charting/effects/charting.effects.ts",
            "properties": [
                {
                    "name": "changingCovidSelector$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(ChartingActions.SET_CURRENT_SELECTION),\r\n            exhaustMap((action) => this.getCovidData(action.selection))\r\n        )\r\n    })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "getCovidData",
                    "defaultValue": "function (data): Observable<Action> {\r\n        return this.chartingService.getCovidData(data).pipe(\r\n            map((data: any[]) => data.map((item) => CovidData.adapt(item))),\r\n            map(\r\n                (response: CovidData[]) => {\r\n                    response.sort(function (a, b) {\r\n                        return a.date.getTime() - b.date.getTime()\r\n                    })\r\n                    return ChartingActions.GET_COVID_DATA_SUCCESS({ data: response })\r\n                }\r\n            ),\r\n            catchError(\r\n                (error) =>\r\n                    of(ChartingActions.GET_COVID_DATA_FAILURE({ errorMsg: error.message }))\r\n            )\r\n        )\r\n    }",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "startGettingNationalData$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(ChartingActions.GET_COVID_DATA_START),\r\n            concatLatestFrom(() => this.store.select(fromCharting.selectSelected)),\r\n            exhaustMap(([, data]) => this.getCovidData(data))\r\n        );\r\n    })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Actions, concatLatestFrom, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { Action, Store } from \"@ngrx/store\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { catchError, exhaustMap, map } from \"rxjs/operators\";\r\nimport * as ChartingActions from '../actions/charting.actions';\r\nimport { ChartingService } from \"../charting.service\";\r\nimport { CovidData } from \"../models/CovidData.model\";\r\nimport * as fromCharting from '../reducers';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class ChartingEffects {\r\n    constructor(private actions$: Actions,\r\n        private chartingService: ChartingService,\r\n        private store: Store) { }\r\n\r\n    startGettingNationalData$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(ChartingActions.GET_COVID_DATA_START),\r\n            concatLatestFrom(() => this.store.select(fromCharting.selectSelected)),\r\n            exhaustMap(([, data]) => this.getCovidData(data))\r\n        );\r\n    });\r\n\r\n    changingCovidSelector$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(ChartingActions.SET_CURRENT_SELECTION),\r\n            exhaustMap((action) => this.getCovidData(action.selection))\r\n        )\r\n    });\r\n\r\n    getCovidData = function (data): Observable<Action> {\r\n        return this.chartingService.getCovidData(data).pipe(\r\n            map((data: any[]) => data.map((item) => CovidData.adapt(item))),\r\n            map(\r\n                (response: CovidData[]) => {\r\n                    response.sort(function (a, b) {\r\n                        return a.date.getTime() - b.date.getTime()\r\n                    })\r\n                    return ChartingActions.GET_COVID_DATA_SUCCESS({ data: response })\r\n                }\r\n            ),\r\n            catchError(\r\n                (error) =>\r\n                    of(ChartingActions.GET_COVID_DATA_FAILURE({ errorMsg: error.message }))\r\n            )\r\n        )\r\n    }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "chartingService",
                        "type": "ChartingService"
                    },
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "chartingService",
                        "type": "ChartingService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ChartingService",
            "id": "injectable-ChartingService-e944c60ef72fc8c9b80072fc24531af4",
            "file": "src/app/charting/charting.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCovidData",
                    "args": [
                        {
                            "name": "state",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNationalCovidData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "getStateCovidData",
                    "args": [
                        {
                            "name": "state",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport * as env from 'src/environments/environment';\nimport { NationalCovidDay } from './models/NationalCovidDay';\nimport { StateCovidDay } from './models/StateCovidDay';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChartingService {\n\n  constructor(private http: HttpClient) { }\n\n  getNationalCovidData() {\n    return this.http.get<any[]>(env.environment.nationalAPIURL);    \n  }\n\n  getStateCovidData(state: string) {\n    return this.http.get<any[]>(env.stateAPIURL(state));\n  }\n\n  getCovidData(state: string) {\n    state = state.toLocaleLowerCase();\n    return (state == 'us') ? this.getNationalCovidData() : this.getStateCovidData(state);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MemeEffects",
            "id": "injectable-MemeEffects-6aaa4149e123d3c9ef9d472a46349b9c",
            "file": "src/app/meme/effects/meme.effect.ts",
            "properties": [
                {
                    "name": "clearThenSearch$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(MemeActions.MEME_CLEAR_ITEMS_THEN_SEARCH),\r\n            map(x => MemeActions.MEME_SET_SEARCH({search: x.search}))\r\n        );\r\n    })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "setSearchTerm$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(MemeActions.MEME_SET_SEARCH),\r\n            map(x => MemeActions.MEME_SEARCH_START())\r\n        );\r\n    })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "startGettingSearch$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(MemeActions.MEME_SEARCH_START),\r\n            concatLatestFrom(() => this.store.select(fromMeme.selectMemeAndTotalSearch)),                        \r\n            exhaustMap(([action,x]) => this.memeService.getSearchTerm(x.total, x.term).pipe(\r\n                map((data) => {\r\n                    return MemeActions.MEME_SEARCH_FINISH({ data: data.data, pagination: data.pagination })\r\n                }),\r\n                catchError(\r\n                    (error) =>\r\n                        of(MemeActions.MEME_SEARCH_ERROR({ msg: error.message }))\r\n                )\r\n            ))\r\n        );\r\n    })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "startGettingTrending$",
                    "defaultValue": "createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(MemeActions.MEME_TRENDING_START),\r\n            concatLatestFrom(() => this.store.select(fromMeme.selectMemeTotal)),            \r\n            exhaustMap(([action,x]) => this.memeService.getTrending(x).pipe(\r\n                map((data, offset) => {\r\n                    return MemeActions.MEME_TRENDING_FINISH({ data: data.data, pagination: data.pagination })\r\n                }),\r\n                catchError(\r\n                    (error) =>\r\n                        of(MemeActions.MEME_TRENDING_ERROR({ msg: error.message }))\r\n                )\r\n            ))\r\n        );\r\n    })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Actions, concatLatestFrom, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { catchError, exhaustMap, map } from \"rxjs/operators\";\r\nimport { MemeService } from \"../meme.service\";\r\nimport * as MemeActions from '../actions/meme.actions';\r\nimport * as fromMeme from '../reducers';\r\nimport { of } from \"rxjs\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class MemeEffects {\r\n    constructor(private actions$: Actions,\r\n        private memeService: MemeService,\r\n        private store: Store) { }\r\n\r\n    startGettingTrending$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(MemeActions.MEME_TRENDING_START),\r\n            concatLatestFrom(() => this.store.select(fromMeme.selectMemeTotal)),            \r\n            exhaustMap(([action,x]) => this.memeService.getTrending(x).pipe(\r\n                map((data, offset) => {\r\n                    return MemeActions.MEME_TRENDING_FINISH({ data: data.data, pagination: data.pagination })\r\n                }),\r\n                catchError(\r\n                    (error) =>\r\n                        of(MemeActions.MEME_TRENDING_ERROR({ msg: error.message }))\r\n                )\r\n            ))\r\n        );\r\n    });\r\n\r\n    clearThenSearch$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(MemeActions.MEME_CLEAR_ITEMS_THEN_SEARCH),\r\n            map(x => MemeActions.MEME_SET_SEARCH({search: x.search}))\r\n        );\r\n    });\r\n\r\n    setSearchTerm$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(MemeActions.MEME_SET_SEARCH),\r\n            map(x => MemeActions.MEME_SEARCH_START())\r\n        );\r\n    });\r\n\r\n    startGettingSearch$ = createEffect(() => {\r\n        return this.actions$.pipe(\r\n            ofType(MemeActions.MEME_SEARCH_START),\r\n            concatLatestFrom(() => this.store.select(fromMeme.selectMemeAndTotalSearch)),                        \r\n            exhaustMap(([action,x]) => this.memeService.getSearchTerm(x.total, x.term).pipe(\r\n                map((data) => {\r\n                    return MemeActions.MEME_SEARCH_FINISH({ data: data.data, pagination: data.pagination })\r\n                }),\r\n                catchError(\r\n                    (error) =>\r\n                        of(MemeActions.MEME_SEARCH_ERROR({ msg: error.message }))\r\n                )\r\n            ))\r\n        );\r\n    });    \r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "memeService",
                        "type": "MemeService"
                    },
                    {
                        "name": "store",
                        "type": "Store"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "memeService",
                        "type": "MemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MemeService",
            "id": "injectable-MemeService-e0a77f6ac8cd2677d80cc47efdd62069",
            "file": "src/app/meme/meme.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getSearchTerm",
                    "args": [
                        {
                            "name": "offset",
                            "type": "number",
                            "defaultValue": "0"
                        },
                        {
                            "name": "search",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "search",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTrending",
                    "args": [
                        {
                            "name": "offset",
                            "type": "number",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "number",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { GiphyResult } from './models/GiphyResult.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MemeService {\n\n  constructor(private http: HttpClient) { }\n\n  getTrending(offset: number = 0) {\n    let params = new HttpParams();\n    params = params.append('api_key', environment.GIPHY_API_KEY);\n    params = params.append('offset', String(offset));\n    params = params.append('limit', '25');\n    return this.http.get<GiphyResult>(environment.GIPHY_API_URL_TRENDING, { params: params });\n  }\n\n  getSearchTerm(offset: number = 0, search: string) {\n    let params = new HttpParams();\n    params = params.append('api_key', environment.GIPHY_API_KEY);\n    params = params.append('offset', String(offset));\n    params = params.append('limit', '25');\n    params = params.append('q', search);\n    return this.http.get<GiphyResult>(environment.GIPHY_API_URL_SEARCH, { params: params });    \n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NationalCovidDayAdapter",
            "id": "injectable-NationalCovidDayAdapter-49578ffb935126aab1e62e6dd33b7295",
            "file": "src/app/charting/models/NationalCovidDay.ts",
            "properties": [],
            "methods": [
                {
                    "name": "adapt",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "NationalCovidDay",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Adapter } from \"src/app/core/adapter\";\r\n\r\nexport class NationalCovidDay {\r\n    date: Date;\r\n    dateChecked: Date;\r\n    lastModified: Date;\r\n    constructor(_date: number, \r\n        public states: number,\r\n        public positive: number, \r\n        public negative: number, \r\n        public pending: number,\r\n        public hospitalizedCurrently: number,\r\n        public hospitalizedCumulative: number,\r\n        public inIcuCurrently: number,\r\n        public inIcuCumulative: number,\r\n        public onVentilatorCurrently: number,\r\n        public onVentilatorCumulative: number,\r\n        _dateChecked: string,\r\n        public death: number,\r\n        public hospitalized: number,\r\n        public totalTestResults: number,\r\n        _lastModified: string,\r\n        public recovered: any,\r\n        public total: number,\r\n        public posNeg: number,\r\n        public deathIncrease: number,\r\n        public hospitalizedIncrease: number,\r\n        public negativeIncrease: number,\r\n        public positiveIncrease: number,\r\n        public totalTestResultsIncrease: number,\r\n        public hash: string\r\n        ) {\r\n            try {\r\n                this.date = new Date( _date / 10000,  _date % 10000 / 100-1,  _date % 100); \r\n                  \r\n            } catch (error) {\r\n                console.log(`Error in date conversion, National Covid Day adapter ${error}`);\r\n            }\r\n            \r\n            this.lastModified = new Date(_lastModified);\r\n            this.dateChecked = new Date(_dateChecked);\r\n        }\r\n        \r\n}\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n  })\r\n  export class NationalCovidDayAdapter implements Adapter<NationalCovidDay> {\r\n     adapt(item: any): NationalCovidDay {\r\n      return new NationalCovidDay(item.date, \r\n        item.states, \r\n        item.positive, \r\n        item.negative, \r\n        item.pending,\r\n        item.hostpitalizedCurrently,\r\n        item.hospitalizedCumulative,\r\n        item.inIcuCurrently,\r\n        item.inIcuCumulative,\r\n        item.onVentilatorCurrently,\r\n        item.onVentilatorCumulative,\r\n        item.dateChecked,\r\n        item.death,\r\n        item.hospitalized,\r\n        item.totalTestResults,\r\n        item.lastModified,\r\n        item.recovered,\r\n        item.total,\r\n        item.posNeg,\r\n        item.deathIncrease,\r\n        item.hospitalizedIncrease,\r\n        item.negativeIncrease,\r\n        item.positiveIncrease,\r\n        item.totalTestResultsIncrease,\r\n        item.hash);\r\n    }\r\n  }",
            "type": "injectable"
        },
        {
            "name": "StateCovidDayAdapter",
            "id": "injectable-StateCovidDayAdapter-4cedbf0f55c364804d07e1912d5fd0a7",
            "file": "src/app/charting/models/StateCovidDay.ts",
            "properties": [],
            "methods": [
                {
                    "name": "adapt",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "StateCovidDay",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Adapter } from \"src/app/core/adapter\";\r\n\r\nexport class StateCovidDay {\r\n    date: Date;\r\n    dateChecked: Date;\r\n    dateModified: Date;\r\n    constructor(\r\n        _date: number,\r\n        _dateChecked: string,\r\n        _dateModified: string,\r\n        public state: string,\r\n        public positive: number,\r\n        public probableCases: number,\r\n        public negative: number,\r\n        public pending: number,\r\n        public totalTestResultsSource: string,\r\n        public totalTestResults: number,\r\n        public hospitalizedCurrently: number,\r\n        public hospitalizedCumulative: number,\r\n        public inIcuCurrently: number,\r\n        public inIcuCumulative: number,\r\n        public onVentilatorCurrently: number,\r\n        public onVentilatorCumulative: number,\r\n        public recovered: number,\r\n        public lastUpdateEt: string,\r\n        public checkTimeEt: string,\r\n        public death: number,\r\n        public hospitalized: number,\r\n        public hospitalizedDischarged: number,\r\n        public totalTestsViral: number,\r\n        public positiveTestsViral: number,\r\n        public negativeTestsViral: number,\r\n        public positiveCasesViral: number,\r\n        public deathConfirmed: number,\r\n        public deathProbable: number,\r\n        public totalTestEncountersViral: number,\r\n        public totalTestsPeopleViral: number,\r\n        public totalTestsAntibody: number,\r\n        public positiveTestsAntibody: number,\r\n        public negativeTestsAntibody: number,\r\n        public totalTestsPeopleAntibody: number,\r\n        public positiveTestsPeopleAntibody: number,\r\n        public negativeTestsPeopleAntibody: number,\r\n        public totalTestsPeopleAntigen: number,\r\n        public positiveTestsPeopleAntigen: number,\r\n        public totalTestsAntigen: number,\r\n        public positiveTestsAntigen: number,\r\n        public fips: string,\r\n        public positiveIncrease: number,\r\n        public negativeIncrease: number,\r\n        public total: number,\r\n        public totalTestResultsIncrease: number,\r\n        public posNeg: number,\r\n        public dataQualityGrade: string,\r\n        public deathIncrease: number,\r\n        public hospitalizedIncrease: number,\r\n        public hash: string,\r\n        public commercialScore: number,\r\n        public negativeRegularScore: number,\r\n        public negativeScore: number,\r\n        public positiveScore: number,\r\n        public score: number,\r\n        public grade: string,\r\n    ) {\r\n        try {\r\n            this.date = new Date(_date / 10000, _date % 10000 / 100 - 1, _date % 100);\r\n\r\n        } catch (error) {\r\n            console.log(`Error in date conversion, National Covid Day adapter ${error}`);\r\n        }\r\n\r\n        this.dateModified = new Date(_dateModified);\r\n        this.dateChecked = new Date(_dateChecked);\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class StateCovidDayAdapter implements Adapter<StateCovidDay> {\r\n    adapt(item: any): StateCovidDay {\r\n        return new StateCovidDay(item.date,\r\n            item.dateChecked,\r\n            item.dateModified,\r\n            item.state,\r\n            item.positive,\r\n            item.probableCases,\r\n            item.negative,\r\n            item.pending,\r\n            item.totalTestResultsSource,\r\n            item.totalTestResults,\r\n            item.hospitalizedCurrently,\r\n            item.hospitalizedCumulative,\r\n            item.inIcuCurrently,\r\n            item.inIcuCumulative,\r\n            item.onVentilatorCurrently,\r\n            item.onVentilatorCumulative,\r\n            item.recovered,\r\n            item.lastUpdateEt,\r\n            item.checkTimeEt,\r\n            item.death,\r\n            item.hospitalized,\r\n            item.hospitalizedDischarged,\r\n            item.totalTestsViral,\r\n            item.positiveTestsViral,\r\n            item.negativeTestsViral,\r\n            item.positiveCasesViral,\r\n            item.deathConfirmed,\r\n            item.deathProbable,\r\n            item.totalTestEncountersViral,\r\n            item.totalTestsPeopleViral,\r\n            item.totalTestsAntibody,\r\n            item.positiveTestsAntibody,\r\n            item.negativeTestsAntibody,\r\n            item.totalTestsPeopleAntibody,\r\n            item.positiveTestsPeopleAntibody,\r\n            item.negativeTestsPeopleAntibody,\r\n            item.totalTestsPeopleAntigen,\r\n            item.positiveTestsPeopleAntigen,\r\n            item.totalTestsAntibody,\r\n            item.positiveTestsAntigen,\r\n            item.fips,\r\n            item.positiveIncrease,\r\n            item.negativeIncrase,\r\n            item.total,\r\n            item.totalTestResultsIncrease,\r\n            item.posNeg,\r\n            item.dataQualityGrade,\r\n            item.deathIncrease,\r\n            item.hospitalizedIncrease,\r\n            item.hash,\r\n            item.commercialScore,\r\n            item.negativeRegularScore,\r\n            item.negativeScore,\r\n            item.positiveScore,\r\n            item.score,\r\n            item.grade\r\n        );\r\n    }\r\n}",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CovidData",
            "id": "class-CovidData-3f171e4c2e974b1787fe9864ae47c5dd",
            "file": "src/app/charting/models/CovidData.model.ts",
            "type": "class",
            "sourceCode": "import { state_hash } from '../../core/states';\r\nimport { CovidChartTypes } from './CovidChartTypes';\r\n\r\ninterface CovidDataInterface {\r\n    date: Date;\r\n    death: number;\r\n    deathIncrease: number;\r\n    hospitalizedCumulative: number;\r\n    hospitalizedCurrently: number;\r\n    hospitalizedIncrease: number;\r\n    inIcuCumulative: number;\r\n    inIcuCurrently: number;\r\n    onVentilatorCumulative: number;\r\n    onVentilatorCurrently: number;\r\n    positive: number;\r\n    positiveIncrease: number;\r\n    totalTestResults: number;\r\n    totalTestResultsIncrease: number;\r\n    recovered: number;\r\n    name: string;\r\n}\r\n\r\nexport class CovidData implements CovidDataInterface {\r\n    date: Date;\r\n    name: string;\r\n    constructor(\r\n        _date: number,\r\n        public death: number,\r\n        public deathIncrease: number,\r\n        public hospitalizedCumulative: number,\r\n        public hospitalizedCurrently: number,\r\n        public hospitalizedIncrease: number,\r\n        public inIcuCumulative: number,\r\n        public inIcuCurrently: number,\r\n        public onVentilatorCumulative: number,\r\n        public onVentilatorCurrently: number,\r\n        public positive: number,\r\n        public positiveIncrease: number,\r\n        public totalTestResults: number,\r\n        public totalTestResultsIncrease: number,\r\n        public recovered: number,\r\n        _name: string\r\n    ) {\r\n        try {\r\n            this.date = new Date(_date / 10000, _date % 10000 / 100 - 1, _date % 100);\r\n\r\n        } catch (error) {\r\n            console.log(`Error in date conversion, National Covid Day adapter ${error}`);\r\n        }\r\n\r\n        this.name = state_hash[_name];\r\n    }\r\n\r\n    getData(dataType: string, daily: boolean = false) : number {\r\n        switch (dataType) {\r\n            case CovidChartTypes.Infections:\r\n                return daily ?  this.positiveIncrease : this.positive;                \r\n            case CovidChartTypes.Deaths:\r\n                return daily ?  this.deathIncrease : this.death;                \r\n            case CovidChartTypes.Hospitalized:\r\n                return daily ?  this.hospitalizedIncrease : this.hospitalizedCumulative;                \r\n            case CovidChartTypes.Tests:\r\n                return daily ?  this.totalTestResultsIncrease : this.totalTestResults;                \r\n        }\r\n    }\r\n\r\n    static getLabel(dataType: string, daily: boolean = false) : string {\r\n        return daily ? `Daily ${dataType}` : `Total ${dataType}`;\r\n    }\r\n\r\n\r\n    static adapt(item: any): CovidData {\r\n        return new CovidData(\r\n            item.date,\r\n            item.death,\r\n            item.deathIncrease,\r\n            item.hospitalizedCumulative,\r\n            item.hospitalizedCurrently,\r\n            item.hospitalizedIncrease,\r\n            item.inIcuCumulative,\r\n            item.inIcuCurrently,\r\n            item.onVentilatorCumulative,\r\n            item.onVentilatorCurrently,\r\n            item.positive,\r\n            item.positiveIncrease,\r\n            item.totalTestResults,\r\n            item.totalTestResultsIncrease,\r\n            item.recovered,\r\n            item.name\r\n        )\r\n    }\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_date",
                        "type": "number"
                    },
                    {
                        "name": "death",
                        "type": "number"
                    },
                    {
                        "name": "deathIncrease",
                        "type": "number"
                    },
                    {
                        "name": "hospitalizedCumulative",
                        "type": "number"
                    },
                    {
                        "name": "hospitalizedCurrently",
                        "type": "number"
                    },
                    {
                        "name": "hospitalizedIncrease",
                        "type": "number"
                    },
                    {
                        "name": "inIcuCumulative",
                        "type": "number"
                    },
                    {
                        "name": "inIcuCurrently",
                        "type": "number"
                    },
                    {
                        "name": "onVentilatorCumulative",
                        "type": "number"
                    },
                    {
                        "name": "onVentilatorCurrently",
                        "type": "number"
                    },
                    {
                        "name": "positive",
                        "type": "number"
                    },
                    {
                        "name": "positiveIncrease",
                        "type": "number"
                    },
                    {
                        "name": "totalTestResults",
                        "type": "number"
                    },
                    {
                        "name": "totalTestResultsIncrease",
                        "type": "number"
                    },
                    {
                        "name": "recovered",
                        "type": "number"
                    },
                    {
                        "name": "_name",
                        "type": "string"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "_date",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "death",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deathIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalizedCumulative",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalizedCurrently",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalizedIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inIcuCumulative",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inIcuCurrently",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "onVentilatorCumulative",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "onVentilatorCurrently",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positive",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positiveIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestResults",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestResultsIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recovered",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "date",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "death",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deathIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalizedCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalizedCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalizedIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inIcuCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inIcuCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onVentilatorCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onVentilatorCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positive",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positiveIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "recovered",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestResultsIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "adapt",
                    "args": [
                        {
                            "name": "item",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "CovidData",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "dataType",
                            "type": "string"
                        },
                        {
                            "name": "daily",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "daily",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLabel",
                    "args": [
                        {
                            "name": "dataType",
                            "type": "string"
                        },
                        {
                            "name": "daily",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataType",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "daily",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "CovidDataInterface"
            ]
        },
        {
            "name": "loginUser",
            "id": "class-loginUser-3497ed9bfb00997332d53bbc38ac9cae",
            "file": "src/app/auth/models/loginUser.model.ts",
            "type": "class",
            "sourceCode": "export class loginUser {    \r\n    constructor(public email: string, public password: string, private returnSecureToken: boolean = true) {};\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "email",
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "type": "string"
                    },
                    {
                        "name": "returnSecureToken",
                        "type": "boolean",
                        "defaultValue": "true"
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "email",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "password",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "returnSecureToken",
                        "type": "boolean",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NationalCovidDay",
            "id": "class-NationalCovidDay-49578ffb935126aab1e62e6dd33b7295",
            "file": "src/app/charting/models/NationalCovidDay.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Adapter } from \"src/app/core/adapter\";\r\n\r\nexport class NationalCovidDay {\r\n    date: Date;\r\n    dateChecked: Date;\r\n    lastModified: Date;\r\n    constructor(_date: number, \r\n        public states: number,\r\n        public positive: number, \r\n        public negative: number, \r\n        public pending: number,\r\n        public hospitalizedCurrently: number,\r\n        public hospitalizedCumulative: number,\r\n        public inIcuCurrently: number,\r\n        public inIcuCumulative: number,\r\n        public onVentilatorCurrently: number,\r\n        public onVentilatorCumulative: number,\r\n        _dateChecked: string,\r\n        public death: number,\r\n        public hospitalized: number,\r\n        public totalTestResults: number,\r\n        _lastModified: string,\r\n        public recovered: any,\r\n        public total: number,\r\n        public posNeg: number,\r\n        public deathIncrease: number,\r\n        public hospitalizedIncrease: number,\r\n        public negativeIncrease: number,\r\n        public positiveIncrease: number,\r\n        public totalTestResultsIncrease: number,\r\n        public hash: string\r\n        ) {\r\n            try {\r\n                this.date = new Date( _date / 10000,  _date % 10000 / 100-1,  _date % 100); \r\n                  \r\n            } catch (error) {\r\n                console.log(`Error in date conversion, National Covid Day adapter ${error}`);\r\n            }\r\n            \r\n            this.lastModified = new Date(_lastModified);\r\n            this.dateChecked = new Date(_dateChecked);\r\n        }\r\n        \r\n}\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n  })\r\n  export class NationalCovidDayAdapter implements Adapter<NationalCovidDay> {\r\n     adapt(item: any): NationalCovidDay {\r\n      return new NationalCovidDay(item.date, \r\n        item.states, \r\n        item.positive, \r\n        item.negative, \r\n        item.pending,\r\n        item.hostpitalizedCurrently,\r\n        item.hospitalizedCumulative,\r\n        item.inIcuCurrently,\r\n        item.inIcuCumulative,\r\n        item.onVentilatorCurrently,\r\n        item.onVentilatorCumulative,\r\n        item.dateChecked,\r\n        item.death,\r\n        item.hospitalized,\r\n        item.totalTestResults,\r\n        item.lastModified,\r\n        item.recovered,\r\n        item.total,\r\n        item.posNeg,\r\n        item.deathIncrease,\r\n        item.hospitalizedIncrease,\r\n        item.negativeIncrease,\r\n        item.positiveIncrease,\r\n        item.totalTestResultsIncrease,\r\n        item.hash);\r\n    }\r\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_date",
                        "type": "number"
                    },
                    {
                        "name": "states",
                        "type": "number"
                    },
                    {
                        "name": "positive",
                        "type": "number"
                    },
                    {
                        "name": "negative",
                        "type": "number"
                    },
                    {
                        "name": "pending",
                        "type": "number"
                    },
                    {
                        "name": "hospitalizedCurrently",
                        "type": "number"
                    },
                    {
                        "name": "hospitalizedCumulative",
                        "type": "number"
                    },
                    {
                        "name": "inIcuCurrently",
                        "type": "number"
                    },
                    {
                        "name": "inIcuCumulative",
                        "type": "number"
                    },
                    {
                        "name": "onVentilatorCurrently",
                        "type": "number"
                    },
                    {
                        "name": "onVentilatorCumulative",
                        "type": "number"
                    },
                    {
                        "name": "_dateChecked",
                        "type": "string"
                    },
                    {
                        "name": "death",
                        "type": "number"
                    },
                    {
                        "name": "hospitalized",
                        "type": "number"
                    },
                    {
                        "name": "totalTestResults",
                        "type": "number"
                    },
                    {
                        "name": "_lastModified",
                        "type": "string"
                    },
                    {
                        "name": "recovered",
                        "type": "any"
                    },
                    {
                        "name": "total",
                        "type": "number"
                    },
                    {
                        "name": "posNeg",
                        "type": "number"
                    },
                    {
                        "name": "deathIncrease",
                        "type": "number"
                    },
                    {
                        "name": "hospitalizedIncrease",
                        "type": "number"
                    },
                    {
                        "name": "negativeIncrease",
                        "type": "number"
                    },
                    {
                        "name": "positiveIncrease",
                        "type": "number"
                    },
                    {
                        "name": "totalTestResultsIncrease",
                        "type": "number"
                    },
                    {
                        "name": "hash",
                        "type": "string"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "_date",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "states",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positive",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "negative",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pending",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalizedCurrently",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalizedCumulative",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inIcuCurrently",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inIcuCumulative",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "onVentilatorCurrently",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "onVentilatorCumulative",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dateChecked",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "death",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalized",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestResults",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_lastModified",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recovered",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "total",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "posNeg",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deathIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalizedIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "negativeIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positiveIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestResultsIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hash",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "date",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dateChecked",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "death",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deathIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hash",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalized",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalizedCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalizedCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalizedIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inIcuCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inIcuCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lastModified",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "negative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "negativeIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onVentilatorCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onVentilatorCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pending",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positive",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positiveIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "posNeg",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "recovered",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "states",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestResultsIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StateCovidDay",
            "id": "class-StateCovidDay-4cedbf0f55c364804d07e1912d5fd0a7",
            "file": "src/app/charting/models/StateCovidDay.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { Adapter } from \"src/app/core/adapter\";\r\n\r\nexport class StateCovidDay {\r\n    date: Date;\r\n    dateChecked: Date;\r\n    dateModified: Date;\r\n    constructor(\r\n        _date: number,\r\n        _dateChecked: string,\r\n        _dateModified: string,\r\n        public state: string,\r\n        public positive: number,\r\n        public probableCases: number,\r\n        public negative: number,\r\n        public pending: number,\r\n        public totalTestResultsSource: string,\r\n        public totalTestResults: number,\r\n        public hospitalizedCurrently: number,\r\n        public hospitalizedCumulative: number,\r\n        public inIcuCurrently: number,\r\n        public inIcuCumulative: number,\r\n        public onVentilatorCurrently: number,\r\n        public onVentilatorCumulative: number,\r\n        public recovered: number,\r\n        public lastUpdateEt: string,\r\n        public checkTimeEt: string,\r\n        public death: number,\r\n        public hospitalized: number,\r\n        public hospitalizedDischarged: number,\r\n        public totalTestsViral: number,\r\n        public positiveTestsViral: number,\r\n        public negativeTestsViral: number,\r\n        public positiveCasesViral: number,\r\n        public deathConfirmed: number,\r\n        public deathProbable: number,\r\n        public totalTestEncountersViral: number,\r\n        public totalTestsPeopleViral: number,\r\n        public totalTestsAntibody: number,\r\n        public positiveTestsAntibody: number,\r\n        public negativeTestsAntibody: number,\r\n        public totalTestsPeopleAntibody: number,\r\n        public positiveTestsPeopleAntibody: number,\r\n        public negativeTestsPeopleAntibody: number,\r\n        public totalTestsPeopleAntigen: number,\r\n        public positiveTestsPeopleAntigen: number,\r\n        public totalTestsAntigen: number,\r\n        public positiveTestsAntigen: number,\r\n        public fips: string,\r\n        public positiveIncrease: number,\r\n        public negativeIncrease: number,\r\n        public total: number,\r\n        public totalTestResultsIncrease: number,\r\n        public posNeg: number,\r\n        public dataQualityGrade: string,\r\n        public deathIncrease: number,\r\n        public hospitalizedIncrease: number,\r\n        public hash: string,\r\n        public commercialScore: number,\r\n        public negativeRegularScore: number,\r\n        public negativeScore: number,\r\n        public positiveScore: number,\r\n        public score: number,\r\n        public grade: string,\r\n    ) {\r\n        try {\r\n            this.date = new Date(_date / 10000, _date % 10000 / 100 - 1, _date % 100);\r\n\r\n        } catch (error) {\r\n            console.log(`Error in date conversion, National Covid Day adapter ${error}`);\r\n        }\r\n\r\n        this.dateModified = new Date(_dateModified);\r\n        this.dateChecked = new Date(_dateChecked);\r\n    }\r\n}\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class StateCovidDayAdapter implements Adapter<StateCovidDay> {\r\n    adapt(item: any): StateCovidDay {\r\n        return new StateCovidDay(item.date,\r\n            item.dateChecked,\r\n            item.dateModified,\r\n            item.state,\r\n            item.positive,\r\n            item.probableCases,\r\n            item.negative,\r\n            item.pending,\r\n            item.totalTestResultsSource,\r\n            item.totalTestResults,\r\n            item.hospitalizedCurrently,\r\n            item.hospitalizedCumulative,\r\n            item.inIcuCurrently,\r\n            item.inIcuCumulative,\r\n            item.onVentilatorCurrently,\r\n            item.onVentilatorCumulative,\r\n            item.recovered,\r\n            item.lastUpdateEt,\r\n            item.checkTimeEt,\r\n            item.death,\r\n            item.hospitalized,\r\n            item.hospitalizedDischarged,\r\n            item.totalTestsViral,\r\n            item.positiveTestsViral,\r\n            item.negativeTestsViral,\r\n            item.positiveCasesViral,\r\n            item.deathConfirmed,\r\n            item.deathProbable,\r\n            item.totalTestEncountersViral,\r\n            item.totalTestsPeopleViral,\r\n            item.totalTestsAntibody,\r\n            item.positiveTestsAntibody,\r\n            item.negativeTestsAntibody,\r\n            item.totalTestsPeopleAntibody,\r\n            item.positiveTestsPeopleAntibody,\r\n            item.negativeTestsPeopleAntibody,\r\n            item.totalTestsPeopleAntigen,\r\n            item.positiveTestsPeopleAntigen,\r\n            item.totalTestsAntibody,\r\n            item.positiveTestsAntigen,\r\n            item.fips,\r\n            item.positiveIncrease,\r\n            item.negativeIncrase,\r\n            item.total,\r\n            item.totalTestResultsIncrease,\r\n            item.posNeg,\r\n            item.dataQualityGrade,\r\n            item.deathIncrease,\r\n            item.hospitalizedIncrease,\r\n            item.hash,\r\n            item.commercialScore,\r\n            item.negativeRegularScore,\r\n            item.negativeScore,\r\n            item.positiveScore,\r\n            item.score,\r\n            item.grade\r\n        );\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_date",
                        "type": "number"
                    },
                    {
                        "name": "_dateChecked",
                        "type": "string"
                    },
                    {
                        "name": "_dateModified",
                        "type": "string"
                    },
                    {
                        "name": "state",
                        "type": "string"
                    },
                    {
                        "name": "positive",
                        "type": "number"
                    },
                    {
                        "name": "probableCases",
                        "type": "number"
                    },
                    {
                        "name": "negative",
                        "type": "number"
                    },
                    {
                        "name": "pending",
                        "type": "number"
                    },
                    {
                        "name": "totalTestResultsSource",
                        "type": "string"
                    },
                    {
                        "name": "totalTestResults",
                        "type": "number"
                    },
                    {
                        "name": "hospitalizedCurrently",
                        "type": "number"
                    },
                    {
                        "name": "hospitalizedCumulative",
                        "type": "number"
                    },
                    {
                        "name": "inIcuCurrently",
                        "type": "number"
                    },
                    {
                        "name": "inIcuCumulative",
                        "type": "number"
                    },
                    {
                        "name": "onVentilatorCurrently",
                        "type": "number"
                    },
                    {
                        "name": "onVentilatorCumulative",
                        "type": "number"
                    },
                    {
                        "name": "recovered",
                        "type": "number"
                    },
                    {
                        "name": "lastUpdateEt",
                        "type": "string"
                    },
                    {
                        "name": "checkTimeEt",
                        "type": "string"
                    },
                    {
                        "name": "death",
                        "type": "number"
                    },
                    {
                        "name": "hospitalized",
                        "type": "number"
                    },
                    {
                        "name": "hospitalizedDischarged",
                        "type": "number"
                    },
                    {
                        "name": "totalTestsViral",
                        "type": "number"
                    },
                    {
                        "name": "positiveTestsViral",
                        "type": "number"
                    },
                    {
                        "name": "negativeTestsViral",
                        "type": "number"
                    },
                    {
                        "name": "positiveCasesViral",
                        "type": "number"
                    },
                    {
                        "name": "deathConfirmed",
                        "type": "number"
                    },
                    {
                        "name": "deathProbable",
                        "type": "number"
                    },
                    {
                        "name": "totalTestEncountersViral",
                        "type": "number"
                    },
                    {
                        "name": "totalTestsPeopleViral",
                        "type": "number"
                    },
                    {
                        "name": "totalTestsAntibody",
                        "type": "number"
                    },
                    {
                        "name": "positiveTestsAntibody",
                        "type": "number"
                    },
                    {
                        "name": "negativeTestsAntibody",
                        "type": "number"
                    },
                    {
                        "name": "totalTestsPeopleAntibody",
                        "type": "number"
                    },
                    {
                        "name": "positiveTestsPeopleAntibody",
                        "type": "number"
                    },
                    {
                        "name": "negativeTestsPeopleAntibody",
                        "type": "number"
                    },
                    {
                        "name": "totalTestsPeopleAntigen",
                        "type": "number"
                    },
                    {
                        "name": "positiveTestsPeopleAntigen",
                        "type": "number"
                    },
                    {
                        "name": "totalTestsAntigen",
                        "type": "number"
                    },
                    {
                        "name": "positiveTestsAntigen",
                        "type": "number"
                    },
                    {
                        "name": "fips",
                        "type": "string"
                    },
                    {
                        "name": "positiveIncrease",
                        "type": "number"
                    },
                    {
                        "name": "negativeIncrease",
                        "type": "number"
                    },
                    {
                        "name": "total",
                        "type": "number"
                    },
                    {
                        "name": "totalTestResultsIncrease",
                        "type": "number"
                    },
                    {
                        "name": "posNeg",
                        "type": "number"
                    },
                    {
                        "name": "dataQualityGrade",
                        "type": "string"
                    },
                    {
                        "name": "deathIncrease",
                        "type": "number"
                    },
                    {
                        "name": "hospitalizedIncrease",
                        "type": "number"
                    },
                    {
                        "name": "hash",
                        "type": "string"
                    },
                    {
                        "name": "commercialScore",
                        "type": "number"
                    },
                    {
                        "name": "negativeRegularScore",
                        "type": "number"
                    },
                    {
                        "name": "negativeScore",
                        "type": "number"
                    },
                    {
                        "name": "positiveScore",
                        "type": "number"
                    },
                    {
                        "name": "score",
                        "type": "number"
                    },
                    {
                        "name": "grade",
                        "type": "string"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "_date",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dateChecked",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_dateModified",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "state",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positive",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "probableCases",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "negative",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pending",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestResultsSource",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestResults",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalizedCurrently",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalizedCumulative",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inIcuCurrently",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inIcuCumulative",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "onVentilatorCurrently",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "onVentilatorCumulative",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recovered",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lastUpdateEt",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "checkTimeEt",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "death",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalized",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalizedDischarged",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestsViral",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positiveTestsViral",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "negativeTestsViral",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positiveCasesViral",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deathConfirmed",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deathProbable",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestEncountersViral",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestsPeopleViral",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestsAntibody",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positiveTestsAntibody",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "negativeTestsAntibody",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestsPeopleAntibody",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positiveTestsPeopleAntibody",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "negativeTestsPeopleAntibody",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestsPeopleAntigen",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positiveTestsPeopleAntigen",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestsAntigen",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positiveTestsAntigen",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fips",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positiveIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "negativeIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "total",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "totalTestResultsIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "posNeg",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataQualityGrade",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deathIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hospitalizedIncrease",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hash",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commercialScore",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "negativeRegularScore",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "negativeScore",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "positiveScore",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "score",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "grade",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "checkTimeEt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "commercialScore",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dataQualityGrade",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "date",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dateChecked",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dateModified",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "death",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deathConfirmed",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deathIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "deathProbable",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fips",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "grade",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hash",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalized",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalizedCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalizedCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalizedDischarged",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hospitalizedIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inIcuCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inIcuCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "lastUpdateEt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "negative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "negativeIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "negativeRegularScore",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "negativeScore",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "negativeTestsAntibody",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "negativeTestsPeopleAntibody",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "negativeTestsViral",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onVentilatorCumulative",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onVentilatorCurrently",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pending",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positive",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positiveCasesViral",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positiveIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positiveScore",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positiveTestsAntibody",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positiveTestsAntigen",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positiveTestsPeopleAntibody",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positiveTestsPeopleAntigen",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "positiveTestsViral",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "posNeg",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "probableCases",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "recovered",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "score",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "state",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestEncountersViral",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestResults",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestResultsIncrease",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestResultsSource",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestsAntibody",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestsAntigen",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestsPeopleAntibody",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestsPeopleAntigen",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestsPeopleViral",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalTestsViral",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-3dffd2a0b63c8f9653156b1ec0596813",
            "file": "src/app/models/user.model.ts",
            "type": "class",
            "sourceCode": "export class User {\r\n    constructor(public email: string, public id: string, private _token: string,private _tokenExpirationDate : Date) {}\r\n\r\n    get token() {\r\n        if (!this._tokenExpirationDate || new Date() > this._tokenExpirationDate) {\r\n            return null;\r\n        }\r\n        return this._token;\r\n    }\r\n\r\n    get expirationMilliseconds() {\r\n        return this._tokenExpirationDate.getTime() - new Date().getTime();\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "email",
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "type": "string"
                    },
                    {
                        "name": "_token",
                        "type": "string"
                    },
                    {
                        "name": "_tokenExpirationDate",
                        "type": "Date"
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "email",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_token",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_tokenExpirationDate",
                        "type": "Date",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "token": {
                    "name": "token",
                    "getSignature": {
                        "name": "token",
                        "type": "",
                        "returnType": "",
                        "line": 4
                    }
                },
                "expirationMilliseconds": {
                    "name": "expirationMilliseconds",
                    "getSignature": {
                        "name": "expirationMilliseconds",
                        "type": "",
                        "returnType": "",
                        "line": 11
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "ImagePreloader",
            "id": "directive-ImagePreloader-b8d925e11fd9321c498cea302a1ac708",
            "file": "src/app/core/imagepreloader.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {Directive, Input, OnInit} from '@angular/core';\r\n\r\n// Define the Directive meta data\r\n@Directive({\r\n  selector: '[img-preloader]', //E.g <img mg-img-preloader=\"http://some_remote_image_url\"\r\n  host: {\r\n    '[attr.src]': 'finalImage'    //the attribute of the host element we want to update. in this case, <img 'src' />\r\n  }\r\n})\r\n\r\n//Class must implement OnInit for @Input()\r\nexport class ImagePreloader implements OnInit {\r\n  @Input('img-preloader') targetSource: string;\r\n\r\n  downloadingImage : any; // In class holder of remote image\r\n  finalImage: any; //property bound to our host attribute.\r\n\r\n  // Set an input so the directive can set a default image.\r\n  @Input() defaultImage : string = 'assets/preloader.gif';\r\n\r\n  //ngOnInit is needed to access the @inputs() variables. these aren't available on constructor()\r\n  ngOnInit() {\r\n    //First set the final image to some default image while we prepare our preloader:\r\n    this.finalImage = this.defaultImage;\r\n\r\n    this.downloadingImage = new Image();  // create image object\r\n    this.downloadingImage.onload = () => { //Once image is completed, console.log confirmation and switch our host attribute\r\n      console.log('image downloaded');\r\n      this.finalImage = this.targetSource;  //do the switch 😀\r\n    }\r\n    // Assign the src to that of some_remote_image_url. Since its an Image Object the\r\n    // on assignment from this.targetSource download would start immediately in the background\r\n    // and trigger the onload()\r\n    this.downloadingImage.src = this.targetSource;\r\n  }\r\n\r\n}",
            "selector": "[img-preloader]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "defaultImage",
                    "defaultValue": "'assets/preloader.gif'",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "img-preloader",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "downloadingImage",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "finalImage",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "implements": [
                "OnInit"
            ]
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b04e0bffe5056ada29e88d6400d7eb0b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_mobileQueryListener",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "mobileQuery",
                    "type": "MediaQueryList",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "defaultValue": "'Rona fun'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [
                        {
                            "name": "sideNav",
                            "type": "MatSidenav"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "sideNav",
                            "type": "MatSidenav",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { MediaMatcher } from '@angular/cdk/layout';\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AuthService } from './auth/auth.service';\nimport * as fromAuth from './auth/reducers';\nimport * as AuthActions from './auth/actions/auth.actions';\nimport { MatSidenav } from '@angular/material/sidenav';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n\nexport class AppComponent implements OnDestroy, OnInit { \n  mobileQuery: MediaQueryList;\n  title = 'Rona fun';\n\n\n  private _mobileQueryListener: () => void;\n\n  constructor(changeDetectorRef: ChangeDetectorRef, \n    media: MediaMatcher, \n    private authService: AuthService, \n    private store: Store<fromAuth.State>) {      \n    this.mobileQuery = media.matchMedia('(max-width: 600px)');\n    this._mobileQueryListener = () => changeDetectorRef.detectChanges();\n    this.mobileQuery.addListener(this._mobileQueryListener);\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(AuthActions.AUTOLOGIN_START());\n  }\n\n  ngOnDestroy(): void {\n    this.mobileQuery.removeListener(this._mobileQueryListener);\n  }\n\n  logout(sideNav: MatSidenav) {\n    sideNav.toggle();\n    this.authService.logout();    \n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".rona-container {\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n\r\n    mat-icon {\r\n      opacity: 0.5;\r\n      padding-right: 0.5em;\r\n    }    \r\n\r\n    .rona-is-mobile .rona-toolbar {\r\n      position: fixed;\r\n      /* Make sure the toolbar will stay on top of the content as it scrolls past. */\r\n      z-index: 2;\r\n    }\r\n\r\n    .mat-drawer {\r\n      min-width: 225px;\r\n    }\r\n    \r\n    .rona-sidenav-container {\r\n      /* When the sidenav is not fixed, stretch the sidenav container to fill the available space. This\r\n         causes `<mat-sidenav-content>` to act as our scrolling element for desktop layouts. */\r\n      flex: 1;\r\n  \r\n      .rona-is-mobile {\r\n          /* When the sidenav is fixed, don't constrain the height of the sidenav container. This allows the\r\n             `<body>` to be our scrolling element for mobile layouts. */\r\n          flex: 1 0 auto;\r\n        }\r\n    }    \r\n  }\r\n  \r\n\r\n  \r\n  h1.rona-app-name {\r\n    margin-left: 8px;\r\n  }\r\n\r\n  \r\n\r\n \r\n  \r\n  \r\n  ",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "media",
                        "type": "MediaMatcher"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "store",
                        "type": "Store<fromAuth.State>"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "media",
                        "type": "MediaMatcher",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<fromAuth.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "OnInit"
            ],
            "templateData": "<div class=\"rona-container\" [class.rona-is-mobile]=\"mobileQuery.matches\">\n    <mat-toolbar color=\"primary\" class=\"rona-toolbar\">\n      <button mat-icon-button (click)=\"snav.toggle()\" *ngIf=\"true\"><mat-icon *ngIf=\"true\">menu</mat-icon></button>\n      <h1 class=\"rona-app-name\">Rona Fun</h1>\n    </mat-toolbar>\n    <mat-sidenav-container class=\"rona-sidenav-container\"\n                           [style.marginTop.px]=\"mobileQuery.matches ? 56 : 0\">\n      <mat-sidenav #snav [mode]=\"mobileQuery.matches ? 'over' : 'over'\"\n                   [fixedInViewport]=\"mobileQuery.matches\" fixedTopGap=\"56\" id=\"sidenav\">\n        <mat-nav-list>\n          <mat-divider></mat-divider>\n          <a mat-list-item (click)=\"logout(snav)\"><mat-icon>logout</mat-icon> Logout</a>\n        </mat-nav-list>\n      </mat-sidenav>\n      <mat-sidenav-content>\n        <router-outlet></router-outlet>\n      </mat-sidenav-content>\n    </mat-sidenav-container>\n  </div>"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-acacce594d4d362df3bb2558eb399658",
            "file": "src/app/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [
                "./auth.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "subscription",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { loginUser } from './models/loginUser.model';\nimport * as fromAuth from './reducers';\nimport * as AuthActions from './actions/auth.actions';\nimport { NgForm } from '@angular/forms';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit, OnDestroy {\n  \n  isLoading$: Observable<boolean>;  \n  subscription: Subscription;\n\n  constructor(private store: Store<fromAuth.State>, private _snackBar: MatSnackBar) { }\n\n  ngOnInit(): void {\n    this.isLoading$ = this.store.select(fromAuth.selectAuthLoading);\n    this.subscription = this.store.select(fromAuth.selectAuthError).subscribe(error => {\n      this._snackBar.dismiss();\n      if (error?.length > 0) {\n        this._snackBar.open(error);\n      }\n    });    \n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n\n  onSubmit(form: NgForm) {\n    const email = form.value.email;\n    const password = form.value.password;       \n\n    this.store.dispatch(AuthActions.LOGIN_START({signup: new loginUser(email, password)}));      \n\n    form.reset();\n  }  \n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 100px 0px;\r\n  }\r\n\r\n  .mat-form-field {\r\n    width: 100%;\r\n    min-width: 300px;\r\n  }\r\n\r\n  mat-card-title,\r\n  mat-card-content {\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  .error {\r\n    padding: 16px;\r\n    width: 300px;\r\n    color: white;\r\n    background-color: red;\r\n  }\r\n\r\n  .button {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }",
                    "styleUrl": "./auth.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<fromAuth.State>"
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<fromAuth.State>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card class=\"example-card\">\n    <mat-card-header>\n        <mat-card-title>Please Login</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <form #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\">\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>Email</mat-label>\n                <input type=\"email\" placeholder=\"Enter email\" id=\"email\" class=\"form-control\" matInput ngModel\n                    name=\"email\" required email>\n            </mat-form-field>\n            <mat-form-field class=\"example-full-width\">\n                <mat-label>Password</mat-label>\n                <input type=\"password\" placeholder=\"Password\" id=\"password\" class=\"form-control\" ngModel required\n                    name=\"password\" matInput minlength=\"6\">\n            </mat-form-field>\n            <div>\n                <button mat-raised-button color=\"primary\" type=\"submit\"\n                    [disabled]=\"authForm.invalid || (isLoading$ | ngrxPush)\">Login<app-loading-spinner\n                        *ngIf=\"(isLoading$ | ngrxPush)\"></app-loading-spinner></button>\n            </div>\n        </form>\n    </mat-card-content>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ChartingComponent",
            "id": "component-ChartingComponent-3f0ad68e9df870ebb114467374ec5890",
            "file": "src/app/charting/charting.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-charting",
            "styleUrls": [
                "./charting.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./charting.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "$chartData",
                    "type": "Observable<ChartDataSets[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "$chartLabels",
                    "type": "Observable<moment.Moment[]>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "$chartTitle",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "$deathData",
                    "type": "Observable<ChartDataSets[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "$endDate",
                    "type": "Observable<Date>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "$hospitalData",
                    "type": "Observable<ChartDataSets[]>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "$infectionData",
                    "type": "Observable<ChartDataSets[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "$loading",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "$startDate",
                    "type": "Observable<Date>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "$testsData",
                    "type": "Observable<ChartDataSets[]>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "deathChartColors",
                    "defaultValue": "[\n    {\n      borderColor: 'rgba(0,120,120,0.25)',\n      backgroundColor: 'rgba(50,120,50,0.0)',\n    },\n    {\n      borderColor: 'green',\n      backgroundColor: 'rgba(50,50,255,0.75)',\n    },\n  ]",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "hospitalChartColors",
                    "defaultValue": "[\n    {\n      borderColor: 'rgba(0,120,120,0.25)',\n      backgroundColor: 'rgba(255,120,50,0.0)',\n    },\n    {\n      borderColor: 'green',\n      backgroundColor: 'rgba(255,50,255,0.75)',\n    },\n  ]",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "infectionChartColors",
                    "defaultValue": "[\n    {\n      borderColor: 'rgba(0,120,120,0.25)',\n      backgroundColor: 'rgba(50,255,50,0.0)',\n    },\n    {\n      borderColor: 'green',\n      backgroundColor: 'rgba(120,120,120,0.75)',\n    },\n  ]",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "lineChartColors",
                    "defaultValue": "[\n    {\n      borderColor: 'rgba(0,120,120,0.25)',\n      backgroundColor: 'rgba(50,120,50,0.0)',\n    },\n    {\n      borderColor: 'green',\n      backgroundColor: 'rgba(50,50,255,0.75)',\n    },\n  ]",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "maxDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "minDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "states",
                    "defaultValue": "enumSelector(state_hash)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "testChartColors",
                    "defaultValue": "[\n    {\n      borderColor: 'rgba(0,120,120,0.25)',\n      backgroundColor: 'rgba(50,120,255,0.0)',\n    },\n    {\n      borderColor: 'green',\n      backgroundColor: 'rgba(50,50,0,0.75)',\n    },\n  ]",
                    "type": "Color[]",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "methodsClass": [
                {
                    "name": "endDateChanged",
                    "args": [
                        {
                            "name": "val",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nationStateValueChanged",
                    "args": [
                        {
                            "name": "val",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "startDateChanged",
                    "args": [
                        {
                            "name": "val",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as moment from 'moment/moment';\nimport { Observable } from 'rxjs';\nimport * as fromCharting from './reducers';\nimport { initialState } from './reducers/charting.reducer';\nimport * as ChartingActions from './actions/charting.actions';\nimport { ChartDataSets } from 'chart.js';\nimport { Color } from 'ng2-charts';\nimport { state_hash, enumSelector } from '../core/states';\n\n\n@Component({\n  selector: 'app-charting',\n  templateUrl: './charting.component.html',\n  styleUrls: ['./charting.component.scss']\n})\nexport class ChartingComponent implements OnInit {\n\n  $chartData: Observable<ChartDataSets[]>;\n  $deathData: Observable<ChartDataSets[]>;\n  $infectionData: Observable<ChartDataSets[]>;\n  $hospitalData: Observable<ChartDataSets[]>;\n  $testsData: Observable<ChartDataSets[]>;\n  $chartLabels: Observable<moment.Moment[]>;\n  $startDate: Observable<Date>;\n  $endDate: Observable<Date>;\n  $chartTitle: Observable<string>;\n  $loading: Observable<boolean>;\n  minDate: Date;\n  maxDate: Date;\n  states = enumSelector(state_hash);\n  lineChartColors: Color[] = [\n    {\n      borderColor: 'rgba(0,120,120,0.25)',\n      backgroundColor: 'rgba(50,120,50,0.0)',\n    },\n    {\n      borderColor: 'green',\n      backgroundColor: 'rgba(50,50,255,0.75)',\n    },\n  ];\n\n  deathChartColors: Color[] = [\n    {\n      borderColor: 'rgba(0,120,120,0.25)',\n      backgroundColor: 'rgba(50,120,50,0.0)',\n    },\n    {\n      borderColor: 'green',\n      backgroundColor: 'rgba(50,50,255,0.75)',\n    },\n  ];\n\n  hospitalChartColors: Color[] = [\n    {\n      borderColor: 'rgba(0,120,120,0.25)',\n      backgroundColor: 'rgba(255,120,50,0.0)',\n    },\n    {\n      borderColor: 'green',\n      backgroundColor: 'rgba(255,50,255,0.75)',\n    },\n  ];\n\n  infectionChartColors: Color[] = [\n    {\n      borderColor: 'rgba(0,120,120,0.25)',\n      backgroundColor: 'rgba(50,255,50,0.0)',\n    },\n    {\n      borderColor: 'green',\n      backgroundColor: 'rgba(120,120,120,0.75)',\n    },\n  ];\n\n  testChartColors: Color[] = [\n    {\n      borderColor: 'rgba(0,120,120,0.25)',\n      backgroundColor: 'rgba(50,120,255,0.0)',\n    },\n    {\n      borderColor: 'green',\n      backgroundColor: 'rgba(50,50,0,0.75)',\n    },\n  ];\n\n  constructor(private store: Store<fromCharting.State>) { }\n\n  ngOnInit(): void {\n    this.$chartData = this.store.select(fromCharting.selectChartingDataForSelected);\n    this.$deathData = this.store.select(fromCharting.selectChartingDataForDeaths);\n    this.$infectionData = this.store.select(fromCharting.selectChartingDataForInfected);\n    this.$hospitalData = this.store.select(fromCharting.selectChartingDataForHospitalized);\n    this.$testsData = this.store.select(fromCharting.selectChartingDataForTests);\n\n    this.$chartLabels = this.store.select(fromCharting.selectChartingChartLabels);\n    this.$startDate = this.store.select(fromCharting.selectStartDateToDate);\n    this.$endDate = this.store.select(fromCharting.selectEndDateToDate);\n    this.$chartTitle = this.store.select(fromCharting.selectChartTitle);\n    this.maxDate = new Date(initialState.endDate);\n    this.minDate = new Date(initialState.startDate);\n    this.$loading = this.store.select(fromCharting.selectChartingLoading);\n  }\n\n  endDateChanged(val: string) {\n    this.store.dispatch(ChartingActions.SET_END_DATE({ ed: val }));\n  }\n\n  startDateChanged(val: string) {\n    this.store.dispatch(ChartingActions.SET_START_DATE({ sd: val }));\n  }\n\n  nationStateValueChanged(val: string) {\n    this.store.dispatch(ChartingActions.SET_CURRENT_SELECTION({selection: val}));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".data-date-range {\r\n    margin: auto;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex-direction: column;\r\n    padding-top: 1rem;\r\n    align-items: center;\r\n    mat-form-field {\r\n        padding-left: 0rem;\r\n        padding-right: 0rem;\r\n        width: 90%\r\n    }\r\n}\r\n\r\n.chart-row {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n\r\n    app-chart-presentation {\r\n        width: 95%;    \r\n        min-height: 15rem;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        margin-top: 1rem;\r\n        position: relative;        \r\n    }    \r\n}\r\n\r\n\r\n\r\n@media screen and (min-width: 900px) {\r\n    .data-date-range {\r\n        flex-direction: row;\r\n        justify-content: center;\r\n        mat-form-field {\r\n            width: 30%;\r\n            padding-left: 0.5rem;\r\n        }        \r\n    }\r\n\r\n\r\n}\r\n\r\n@media screen and (min-width: 1200px) {\r\n\r\n    .chart-row {\r\n        flex-direction: row;\r\n        align-items: stretch;\r\n        flex-wrap: wrap;\r\n        app-chart-presentation {\r\n            width: 45%;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./charting.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<fromCharting.State>"
                    }
                ],
                "line": 86,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<fromCharting.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <button (click)=\"doDate()\">Change Date</button><button (click)=\"doDateBack()\">Change Date Back</button> -->\n<div class=\"data-date-range\">\n  <mat-form-field>\n    <mat-label>Choose a start date</mat-label>\n    <input [value]=\"$startDate | ngrxPush\" #startDate (dateChange)=\"startDateChanged(startDate.value)\" [min]=\"minDate\"\n      [max]=\"maxDate\" matInput [matDatepicker]=\"startPicker\" placeholder=\"Choose a date\" readonly\n      (click)=\"startPicker.open()\">\n    <mat-datepicker-toggle matSuffix [for]=\"startPicker\"></mat-datepicker-toggle>\n    <mat-datepicker #startPicker [startAt]=\"$startDate | ngrxPush\"></mat-datepicker>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>Choose a end date</mat-label>\n    <input [value]=\"$endDate | ngrxPush\" #endDate (dateChange)=\"endDateChanged(endDate.value)\" [min]=\"minDate\"\n      [max]=\"maxDate\" matInput [matDatepicker]=\"endPicker\" placeholder=\"Choose a date\" readonly\n      (click)=\"endPicker.open()\">\n    <mat-datepicker-toggle matSuffix [for]=\"endPicker\"></mat-datepicker-toggle>\n    <mat-datepicker #endPicker [startAt]=\"$endDate | ngrxPush\"></mat-datepicker>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>State or National</mat-label>\n    <mat-select value=\"US\" (selectionChange)=\"nationStateValueChanged($event.value)\">\n      <mat-option *ngFor=\"let state of states\" [value]=\"state.value\">{{ state.title }}</mat-option>\n    </mat-select>\n  </mat-form-field>\n</div>\n<div class=\"chart-row\">\n  <app-chart-presentation [chartdata]=\"$infectionData | ngrxPush\" [chartLabels]=\"$chartLabels | ngrxPush\"\n    [chartTitle]=\"'Infections'\" [lineChartColors]=\"infectionChartColors\" [loading]=\"$loading | ngrxPush\">\n  </app-chart-presentation>\n  <app-chart-presentation [chartdata]=\"$deathData | ngrxPush\" [chartLabels]=\"$chartLabels | ngrxPush\" [chartTitle]=\"'Deaths'\"\n    [lineChartColors]=\"deathChartColors\"  [loading]=\"$loading | ngrxPush\">\n  </app-chart-presentation>\n  <app-chart-presentation [chartdata]=\"$testsData | ngrxPush\" [chartLabels]=\"$chartLabels | ngrxPush\" [chartTitle]=\"'Tests'\"\n    [lineChartColors]=\"testChartColors\"  [loading]=\"$loading | ngrxPush\">\n  </app-chart-presentation>\n  <app-chart-presentation [chartdata]=\"$hospitalData | ngrxPush\" [chartLabels]=\"$chartLabels | ngrxPush\"\n    [chartTitle]=\"'Hospitalized'\" [lineChartColors]=\"hospitalChartColors\"  [loading]=\"$loading | ngrxPush\">\n  </app-chart-presentation>\n</div>"
        },
        {
            "name": "ChartPresentationComponent",
            "id": "component-ChartPresentationComponent-70fd2c7ffce93a3da1da01c904c2f629",
            "file": "src/app/charting/chart-presentation/chart-presentation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chart-presentation",
            "styleUrls": [
                "./chart-presentation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chart-presentation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "chartdata",
                    "line": 16,
                    "type": "ChartDataSets[]"
                },
                {
                    "name": "chartLabels",
                    "line": 17,
                    "type": "moment.Moment[]"
                },
                {
                    "name": "chartTitle",
                    "defaultValue": "''",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "lineChartColors",
                    "line": 19,
                    "type": "Color[]"
                },
                {
                    "name": "loading",
                    "line": 20,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_mobileQueryListener",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "a",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "changeEventListener",
                    "defaultValue": "function (e: MediaQueryListEvent) {\n    this.yAxes = !e.matches;\n    this.updateChart(!e.matches);\n  }.bind(this)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "lineChartData",
                    "defaultValue": "[\n    { data: [], label: 'Infections' },\n  ]",
                    "type": "ChartDataSets[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "lineChartLegend",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "lineChartOptions",
                    "defaultValue": "{\n    responsive: true,\n    ticks: {\n      min: 0\n    },\n    title: {\n      display: false,\n      text: ''\n    },\n    scales: {\n      xAxes: [{\n        type: 'time',\n        gridLines: {\n          display: true\n        },\n        time: {\n          minUnit: 'month'\n        }\n      }],\n      yAxes: [{\n        type: 'linear',\n        id: 'left-axis',\n        display: this.yAxes,\n        position: 'left',\n      }, {\n        type: 'linear',\n        id: 'right-axis',\n        display: this.yAxes,\n        position: 'right',\n        stacked: false,\n        gridLines: { drawOnChartArea: false },\n        ticks: {\n          min: 0\n        }\n      }],\n    },\n    elements: {\n      point: {\n        radius: 1,\n        hitRadius: 4\n      }\n    }\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "lineChartPlugins",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "lineChartType",
                    "defaultValue": "'line'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "mobileQuery",
                    "type": "MediaQueryList",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "myChart",
                    "type": "BaseChartDirective",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'myChart'"
                        }
                    ]
                },
                {
                    "name": "yAxes",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89
                },
                {
                    "name": "updateChart",
                    "args": [
                        {
                            "name": "displayAxis",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "displayAxis",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { ChartDataSets } from 'chart.js';\nimport { BaseChartDirective, Color } from 'ng2-charts';\nimport * as moment from 'moment/moment';\nimport * as Chart from 'chart.js';\nimport { MediaMatcher } from '@angular/cdk/layout';\nimport { ViewChild } from '@angular/core';\n\n\n@Component({\n  selector: 'app-chart-presentation',\n  templateUrl: './chart-presentation.component.html',\n  styleUrls: ['./chart-presentation.component.scss']\n})\nexport class ChartPresentationComponent implements OnInit, OnDestroy {\n  @Input() chartdata: ChartDataSets[];\n  @Input() chartLabels: moment.Moment[];\n  @Input() chartTitle: string = '';\n  @Input() lineChartColors: Color[];\n  @Input() loading: boolean;\n  \n  lineChartData: ChartDataSets[] = [\n    { data: [], label: 'Infections' },\n  ];\n  yAxes = true;\n  lineChartOptions = {\n    responsive: true,\n    ticks: {\n      min: 0\n    },\n    title: {\n      display: false,\n      text: ''\n    },\n    scales: {\n      xAxes: [{\n        type: 'time',\n        gridLines: {\n          display: true\n        },\n        time: {\n          minUnit: 'month'\n        }\n      }],\n      yAxes: [{\n        type: 'linear',\n        id: 'left-axis',\n        display: this.yAxes,\n        position: 'left',\n      }, {\n        type: 'linear',\n        id: 'right-axis',\n        display: this.yAxes,\n        position: 'right',\n        stacked: false,\n        gridLines: { drawOnChartArea: false },\n        ticks: {\n          min: 0\n        }\n      }],\n    },\n    elements: {\n      point: {\n        radius: 1,\n        hitRadius: 4\n      }\n    }\n  };\n\n  @ViewChild('myChart')\n  myChart: BaseChartDirective;\n\n  lineChartLegend = true;\n  lineChartPlugins = [];\n  lineChartType = 'line';\n\n\n  private _mobileQueryListener: () => void;\n  private a: any;\n  mobileQuery: MediaQueryList;\n\n  constructor(private changeDetectorRef: ChangeDetectorRef, private media: MediaMatcher) { }\n\n  ngOnDestroy(): void {\n    //this.mobileQuery.removeListener(this._mobileQueryListener);\n    this.mobileQuery.removeEventListener('change', this.changeEventListener);    \n  }\n\n  ngOnInit(): void {\n    this.lineChartData = this.chartdata;\n    this.lineChartOptions.title.text = this.chartTitle;\n    this.mobileQuery = this.media.matchMedia('(max-width: 600px)');\n    this.mobileQuery.addEventListener('change', this.changeEventListener);\n\n    this.yAxes = !this.mobileQuery?.matches;\n  }\n\n  changeEventListener = function (e: MediaQueryListEvent) {\n    this.yAxes = !e.matches;\n    this.updateChart(!e.matches);\n  }.bind(this);\n\n  /*\n    Set chart to remove Y-Axis labels based on the Media Matcher criteria \n  */\n  updateChart(displayAxis: boolean) {\n    if (this.myChart) {\n      this.myChart.chart.options.scales.yAxes[0].display = displayAxis;\n      this.myChart.chart.options.scales.yAxes[1].display = displayAxis;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.updateChart(this.yAxes);\n  }\n\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "span {\r\n    font-size: larger;\r\n    font-weight: 600;    \r\n}\r\n\r\n.center {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    -moz-transform: translateX(-50%) translateY(-50%);\r\n    -webkit-transform: translateX(-50%) translateY(-50%);\r\n    transform: translateX(-50%) translateY(-50%);\r\n    \r\n}\r\n\r\n.spinner {\r\n    width: 100%;    \r\n    height: 100%;\r\n    background-color: rgba(255,255,255, 0.7);\r\n    z-index: 9999;\r\n    position: absolute;\r\n    margin: 0;\r\n}",
                    "styleUrl": "./chart-presentation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "media",
                        "type": "MediaMatcher"
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "changeDetectorRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "media",
                        "type": "MediaMatcher",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<span>{{chartTitle}}</span>\n<canvas baseChart [datasets]=\"chartdata\" [labels]=\"chartLabels\" [options]=\"lineChartOptions\" [colors]=\"lineChartColors\"\n  [legend]=\"lineChartLegend\" [chartType]=\"lineChartType\" [plugins]=\"lineChartPlugins\" #myChart=\"base-chart\">\n</canvas>\n<div class=\"spinner\" *ngIf=\"loading\">\n  <div class=\"center\">\n    <mat-spinner>\n    </mat-spinner>\n  </div>\n</div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LoadingSpinnerComponent",
            "id": "component-LoadingSpinnerComponent-5ba24fa2682113e7e236acbfbab59588",
            "file": "src/app/core/loading-spinner/loading-spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-spinner",
            "styleUrls": [
                "./loading-spinner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-loading-spinner',\n  templateUrl: './loading-spinner.component.html',\n  styleUrls: ['./loading-spinner.component.scss']\n})\nexport class LoadingSpinnerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".lds-dual-ring {    \r\n    width: 16px;\r\n    height: 16px;        \r\n    display: inline;\r\n    vertical-align: text-top;\r\n  }\r\n  .lds-dual-ring:after {\r\n    content: \" \";\r\n    display: inline-block;\r\n    width: 14px;\r\n    height: 14px;\r\n    margin: 0px;\r\n    border-radius: 50%;\r\n    border: 2px solid #fff;\r\n    border-color: #fff transparent #fff transparent;\r\n    animation: lds-dual-ring 1.2s linear infinite;    \r\n  }\r\n  @keyframes lds-dual-ring {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n  ",
                    "styleUrl": "./loading-spinner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"lds-dual-ring\"></div>\n"
        },
        {
            "name": "MemeComponent",
            "id": "component-MemeComponent-3bdd12fa788d710402b523d3a1f6ab98",
            "file": "src/app/meme/meme.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meme",
            "styleUrls": [
                "./meme.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meme.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as fromMeme from './reducers';\nimport * as MemeActions from './actions/meme.actions';\n\n\n@Component({\n  selector: 'app-meme',\n  templateUrl: './meme.component.html',\n  styleUrls: ['./meme.component.scss']\n})\nexport class MemeComponent implements OnInit {\n\n\n  constructor(private store: Store<fromMeme.State>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(MemeActions.MEME_TRENDING_START());\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./meme.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<fromMeme.State>"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<fromMeme.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-meme-search-bar-container></app-meme-search-bar-container>\n<app-meme-display-container></app-meme-display-container>\n\n"
        },
        {
            "name": "MemeDisplayComponent",
            "id": "component-MemeDisplayComponent-736a3eefcd0252b86414b4620e0a5034",
            "file": "src/app/meme/components/meme-display/meme-display.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meme-display",
            "styleUrls": [
                "./meme-display.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meme-display.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "favorites",
                    "defaultValue": "[]",
                    "line": 13,
                    "type": "string[]"
                },
                {
                    "name": "memes",
                    "defaultValue": "[]",
                    "line": 12,
                    "type": "GIF[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "favoriteClicked",
                    "defaultValue": "new EventEmitter<{meme: GIF, is_favorite: boolean}>()",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "fetchMore",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isInFavorites",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "scrolled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "toggleFavorite",
                    "args": [
                        {
                            "name": "meme",
                            "type": "GIF"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "meme",
                            "type": "GIF",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { GIF } from '../../models/GIF.model';\n\n\n\n@Component({\n  selector: 'app-meme-display',\n  templateUrl: './meme-display.component.html',\n  styleUrls: ['./meme-display.component.scss']\n})\nexport class MemeDisplayComponent implements OnInit  {\n  @Input() memes: GIF[] = [];\n  @Input() favorites: string[] = [];\n  @Output() favoriteClicked = new EventEmitter<{meme: GIF, is_favorite: boolean}>();\n  @Output() fetchMore = new EventEmitter<void>();\n  \n\n  constructor() { }\n  \n  ngOnInit(): void {   \n         \n  }\n\n  toggleFavorite(meme: GIF) {       \n    this.favoriteClicked.emit({meme, is_favorite: this.isInFavorites(meme.id)});\n  }\n\n  scrolled()   {\n    console.log('Scrolling / fetching');\n    this.fetchMore.emit();   \n  }\n\n  isInFavorites(id: string) {\n    return this.favorites.includes(id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use \"~@material/image-list\";\r\n@import \"~@material/image-list/mdc-image-list\";\r\n\r\n.frame {\r\n    height: 86%;    \r\n    width: 100%;\r\n    z-index: 100;\r\n    top: 0;\r\n    margin-top: 10px;\r\n    background-color: white;\r\n    overflow-y: scroll;   \r\n    overflow-x: hidden; \r\n    position: relative;\r\n  }\r\n\r\n.my-image-list {\r\n    justify-content: center;\r\n\r\n    @include image-list.masonry-columns(6);\r\n\r\n    @media(max-width: 1400px) {\r\n        @include image-list.masonry-columns(5);\r\n    }\r\n\r\n    @media(max-width: 1020px) {\r\n        @include image-list.masonry-columns(4);\r\n    }\r\n\r\n    @media(max-width: 960px) {\r\n        @include image-list.masonry-columns(3);\r\n    }\r\n\r\n    @media(max-width: 768px) {\r\n        @include image-list.masonry-columns(2);\r\n    }\r\n\r\n    @media(max-width: 480px) {\r\n        @include image-list.masonry-columns(1);\r\n    }\r\n\r\n    &__item {\r\n        background-color: #ccc;\r\n    }\r\n\r\n    .mdc-image-list__item {\r\n        width: 250px; \r\n        img {\r\n            height: 100%;           \r\n            max-width: 100%;\r\n            &.cover {    \r\n                object-fit: fill;\r\n              }            \r\n        }\r\n    }\r\n\r\n    .mdc-image-list__supporting {\r\n        justify-content: start;\r\n\r\n        .mdc-image-list__label {\r\n            padding-right: 1rem;\r\n            mat-icon {\r\n                vertical-align: middle;\r\n                \r\n                &:hover{\r\n                  cursor: pointer;\r\n                }\r\n                &.selected {\r\n                    color: darkred;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./meme-display.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<!-- <section class=\"memes-layout\">\n    <div class=\"meme-card\" *ngFor=\"let item of memes\">\n        <div class=\"image-container\">\n            <img mat-card-image src=\"{{item.images?.fixed_width?.url}}\" alt=\"item.title\">\n            <div class=\"meme-card-actions\">\n                <mat-icon>\n                    favorite_border\n                </mat-icon>\n                <mat-icon>\n                    share\n                </mat-icon>\n            </div>\n        </div>\n    </div>\n</section> -->\n\n<div class=\"frame\" (scrolled)=\"scrolled()\" infiniteScroll [infiniteScrollDistance]=\"2\" [infiniteScrollThrottle]=\"500\" [scrollWindow]=\"false\">\n     <ul class=\"mdc-image-list mdc-image-list mdc-image-list--with-text-protection my-image-list\">\n        <li class=\"mdc-image-list__item\" *ngFor=\"let item of memes; let index=index;\">            \n            <img class=\"mdc-image-list__image cover\" [img-preloader]=\"item.images?.fixed_width?.url\">            \n            <div class=\"mdc-image-list__supporting\">\n                <span class=\"mdc-image-list__label\" (click)=\"toggleFavorite(item)\">\n                    <mat-icon [class.selected]=\"isInFavorites(item.id)\">\n                        {{isInFavorites(item.id) ? 'favorite' : 'favorite_border' }}\n                    </mat-icon>\n                </span>\n                <span class=\"mdc-image-list__label\">\n                    <mat-icon>\n                        share\n                    </mat-icon>\n                </span>\n            </div>\n        </li>\n    </ul> \n</div>"
        },
        {
            "name": "MemeDisplayContainerComponent",
            "id": "component-MemeDisplayContainerComponent-6f36fbac43e9d679428aa5cfb6712776",
            "file": "src/app/meme/containers/meme-display-container/meme-display-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meme-display-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./meme-display-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "$favorites",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "$memeData",
                    "type": "Observable<GIF[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "favoriteClicked",
                    "args": [
                        {
                            "name": "a",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "a",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { GIF } from '../../models/GIF.model';\nimport * as fromMeme from '../../reducers';\nimport * as FavoritesActions from '../../actions/favorites.actions';\nimport * as MemeActions from '../../actions/meme.actions';\n\n@Component({\n  selector: 'app-meme-display-container',\n  templateUrl: './meme-display-container.component.html'\n})\nexport class MemeDisplayContainerComponent implements OnInit {\n  \n  $memeData: Observable<GIF[]>;\n  $favorites: Observable<string[]>;\n\n  constructor(private store: Store<fromMeme.State>) { }\n\n  ngOnInit(): void {\n    this.$memeData = this.store.select(fromMeme.selectAllMemes);\n    this.$favorites = this.store.select(fromMeme.selectFavoritesIdsAsStringArray);\n  }\n\n  favoriteClicked(a: {meme: GIF, is_favorite: boolean}) {    \n    if (a.is_favorite) {\n      this.store.dispatch(FavoritesActions.FAVORITE_REMOVE({id: a.meme.id as string}))\n    } else {\n      this.store.dispatch(FavoritesActions.FAVORITE_ADD({data: a.meme}));\n    }\n  }\n\n  fetchMore() {        \n    this.store.dispatch(MemeActions.MEME_TRENDING_START());\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<fromMeme.State>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<fromMeme.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-meme-display [memes]=\"$memeData | ngrxPush\" [favorites]=\"$favorites | ngrxPush\" (favoriteClicked)=\"favoriteClicked($event)\" (fetchMore)=\"fetchMore()\"></app-meme-display>\n"
        },
        {
            "name": "MemeSearchBarComponentComponent",
            "id": "component-MemeSearchBarComponentComponent-90604c537ca3775de25995ca509a7c41",
            "file": "src/app/meme/components/meme-search-bar-component/meme-search-bar-component.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meme-search-bar-component",
            "styleUrls": [
                "./meme-search-bar-component.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meme-search-bar-component.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "doSearch",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 12,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "searchTerm",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "search",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\n\n\n@Component({\n  selector: 'app-meme-search-bar-component',\n  templateUrl: './meme-search-bar-component.component.html',\n  styleUrls: ['./meme-search-bar-component.component.scss']\n})\nexport class MemeSearchBarComponentComponent implements OnInit {\n\n  searchTerm: string;\n  @Output() doSearch = new EventEmitter<string>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  search() {\n    this.doSearch.emit(this.searchTerm);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".search-bar {\r\n    margin: auto;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    padding-top: 0.5rem;\r\n    align-items: center;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n\r\n    mat-icon {\r\n        cursor: pointer;\r\n        float: right;\r\n        position: relative;\r\n        color: #4f4f4f;        \r\n        font-size: 32px;\r\n    }\r\n\r\n    mat-form-field {\r\n        width: 30%;\r\n        padding-left: 0.5rem;\r\n    }\r\n\r\n}",
                    "styleUrl": "./meme-search-bar-component.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"search-bar\">\n    <mat-form-field appearance=\"fill\">\n        <mat-label><mat-icon>search</mat-icon></mat-label>\n        <input matInput type=\"text\" placeholder=\"GIF Search\" [(ngModel)]=\"searchTerm\" (keydown.enter)=\"search()\">        \n    </mat-form-field>    \n</div>"
        },
        {
            "name": "MemeSearchBarContainerComponent",
            "id": "component-MemeSearchBarContainerComponent-0302e2697523f267ca91c61893fabc97",
            "file": "src/app/meme/containers/meme-search-bar-container/meme-search-bar-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meme-search-bar-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./meme-search-bar-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doSearch",
                    "args": [
                        {
                            "name": "search",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "search",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport * as fromMeme from '../../reducers';\nimport * as MemeActions from '../../actions/meme.actions';\nimport { Store } from '@ngrx/store';\n\n@Component({\n  selector: 'app-meme-search-bar-container',\n  templateUrl: './meme-search-bar-container.component.html'\n})\nexport class MemeSearchBarContainerComponent implements OnInit {\n\n  constructor(private store: Store<fromMeme.State>) { }\n\n  ngOnInit(): void {\n  }\n\n  doSearch(search: string) {    \n    this.store.dispatch(MemeActions.MEME_CLEAR_ITEMS_THEN_SEARCH({search}));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<fromMeme.State>"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<fromMeme.State>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-meme-search-bar-component (doSearch)=\"doSearch($event)\"></app-meme-search-bar-component>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChartingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ChartPresentationComponent"
                        },
                        {
                            "name": "ChartingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ChartingRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChartingRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ImagePreloader"
                        },
                        {
                            "name": "LoadingSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ImagePreloader"
                        },
                        {
                            "name": "LoadingSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MemeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MemeComponent"
                        },
                        {
                            "name": "MemeDisplayComponent"
                        },
                        {
                            "name": "MemeDisplayContainerComponent"
                        },
                        {
                            "name": "MemeSearchBarComponentComponent"
                        },
                        {
                            "name": "MemeSearchBarContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "MemeRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MemeRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "EntityAdapter<GIF>",
                "defaultValue": "createEntityAdapter<GIF>({})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "EntityAdapter<GIF>",
                "defaultValue": "createEntityAdapter<GIF>({})"
            },
            {
                "name": "authFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/index.ts",
                "type": "string",
                "defaultValue": "'auth'"
            },
            {
                "name": "authStateFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "string",
                "defaultValue": "'authState'"
            },
            {
                "name": "AUTOLOGIN_START",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    namespace + 'Auto Login Start'\r\n)"
            },
            {
                "name": "AUTOLOGIN_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    namespace + 'Auto Login Success',\r\n    props<{user: User}>()\r\n)"
            },
            {
                "name": "chartFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "string",
                "defaultValue": "'chart'"
            },
            {
                "name": "chartingFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/charting.reducer.ts",
                "type": "string",
                "defaultValue": "'charting'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  nationalAPIURL: 'https://api.covidtracking.com/v1/us/daily.json',  \n  signInURL: 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBJqVnwW4N_lXqqpEEMTCXjvcXmzJTSNPE',\n  API_KEY: 'AIzaSyBJqVnwW4N_lXqqpEEMTCXjvcXmzJTSNPE',\n  GIPHY_API_KEY: '8fKQgxFhleNT0glKiICA1QzAgU77B94x',\n  GIPHY_API_URL_TRENDING: 'https://api.giphy.com/v1/gifs/trending',\n  GIPHY_API_URL_SEARCH: 'https://api.giphy.com/v1/gifs/search',\n  GIPHY_API_URL_AUTOCOMPLETE: 'https://api.giphy.com/v1/gifs/search/tags'  \n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  nationalAPIURL: 'https://api.covidtracking.com/v1/us/daily.json',  \n  signInURL: 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBJqVnwW4N_lXqqpEEMTCXjvcXmzJTSNPE',\n  API_KEY: 'AIzaSyBJqVnwW4N_lXqqpEEMTCXjvcXmzJTSNPE',\n  GIPHY_API_KEY: '8fKQgxFhleNT0glKiICA1QzAgU77B94x',\n  GIPHY_API_URL_TRENDING: 'https://api.giphy.com/v1/gifs/trending',\n  GIPHY_API_URL_SEARCH: 'https://api.giphy.com/v1/gifs/search',\n  GIPHY_API_URL_AUTOCOMPLETE: 'https://api.giphy.com/v1/gifs/search/tags'  \n}"
            },
            {
                "name": "FAVORITE_ADD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/favorites.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Favorite] Add One',props<{data: GIF}>())"
            },
            {
                "name": "FAVORITE_REMOVE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/favorites.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Favorite] Remove One',props<{id: string}>())"
            },
            {
                "name": "favoriteFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "string",
                "defaultValue": "'favorites'"
            },
            {
                "name": "favoriteReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(FavoritesActions.FAVORITE_ADD, (state, action) => (adapter.addOne(action.data,{...state}))),        \r\n    on(FavoritesActions.FAVORITE_REMOVE, (state, action) => (adapter.removeOne(action.id, {...state})))\r\n)"
            },
            {
                "name": "GET_COVID_DATA_FAILURE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/actions/charting.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Charting] Get COVID Data Failure', props<{errorMsg: string}>())"
            },
            {
                "name": "GET_COVID_DATA_START",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/actions/charting.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Charting] Get COVID Data')"
            },
            {
                "name": "GET_COVID_DATA_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/actions/charting.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Charting] Get COVID Data Success', props<{data: CovidData[]}>())"
            },
            {
                "name": "getCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.pagination.count"
            },
            {
                "name": "getCovidData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/charting.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.covidData"
            },
            {
                "name": "getEndDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/charting.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.endDate"
            },
            {
                "name": "getError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/charting.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.error"
            },
            {
                "name": "getError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.errorMsg"
            },
            {
                "name": "getError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.error"
            },
            {
                "name": "getEverLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/charting.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.everLoaded"
            },
            {
                "name": "getLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/charting.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.loading"
            },
            {
                "name": "getLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.loading"
            },
            {
                "name": "getLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.loading"
            },
            {
                "name": "getLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.loggedIn"
            },
            {
                "name": "getOffset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.pagination.offset"
            },
            {
                "name": "getSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.search"
            },
            {
                "name": "getSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/charting.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.selected"
            },
            {
                "name": "getSelectedId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.selectedId"
            },
            {
                "name": "getSelectedType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/charting.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.selectedType"
            },
            {
                "name": "getStartDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/charting.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.startDate"
            },
            {
                "name": "getTotalCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.pagination.total_count"
            },
            {
                "name": "getUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "",
                "defaultValue": "(state: State) => state.user"
            },
            {
                "name": "GIPHY_API_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "",
                "defaultValue": "(gif_id) => `https://api.giphy.com/v1/gifs/${gif_id}`"
            },
            {
                "name": "GIPHY_API_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "",
                "defaultValue": "(gif_id) => `https://api.giphy.com/v1/gifs/${gif_id}`"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/charting.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n    everLoaded: false,\r\n    error: null,\r\n    loading: false,\r\n    covidData: [],    \r\n    selected: 'US',\r\n    startDate: '01/01/2020',\r\n    endDate: '03/08/2021',\r\n    selectedType:  CovidChartTypes.Deaths\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n    user: null,\r\n    loading: false,\r\n    loggedIn: false,\r\n    errorMsg: null\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "State",
                "defaultValue": "adapter.getInitialState({\r\n    entities: {},\r\n    ids: []   \r\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "State",
                "defaultValue": "adapter.getInitialState({\r\n    entities: {},\r\n    ids: [],\r\n    pagination: { offset: 0, total_count: 0, count: 0, },\r\n    search: \"\",\r\n    loading: false,\r\n    error: \"\",\r\n    selectedId: null\r\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LOGIN_FAILURE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    namespace + 'Login Failure',\r\n    props<{error: string}>()\r\n)"
            },
            {
                "name": "LOGIN_RESPONSE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    namespace + 'Login Response',\r\n    props<{user: loginResult}>()\r\n)"
            },
            {
                "name": "LOGIN_START",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    namespace + 'Login Start',\r\n    props<{signup: loginUser}>()\r\n)"
            },
            {
                "name": "LOGIN_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    namespace + 'Login Success',\r\n    props<{user: User}>()\r\n)"
            },
            {
                "name": "LOGOUT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    namespace + 'Logout'    \r\n)"
            },
            {
                "name": "MEME_CLEAR_ITEMS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/meme.actions.ts",
                "type": "",
                "defaultValue": "createAction('[MEME] Clear Items')"
            },
            {
                "name": "MEME_CLEAR_ITEMS_THEN_SEARCH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/meme.actions.ts",
                "type": "",
                "defaultValue": "createAction('[MEME] Clear Items Then Search',props<{search: string}>())"
            },
            {
                "name": "MEME_SEARCH_ERROR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/meme.actions.ts",
                "type": "",
                "defaultValue": "createAction('[MEME] Search Error',props<{msg: string}>())"
            },
            {
                "name": "MEME_SEARCH_FINISH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/meme.actions.ts",
                "type": "",
                "defaultValue": "createAction('[MEME] Search Finish',props<{data: GIF[], pagination: GiphyPagination}>())"
            },
            {
                "name": "MEME_SEARCH_START",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/meme.actions.ts",
                "type": "",
                "defaultValue": "createAction('[MEME] Get Search')"
            },
            {
                "name": "MEME_SET_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/meme.actions.ts",
                "type": "",
                "defaultValue": "createAction('[MEME] Set Meme Id',props<{id: string}>())"
            },
            {
                "name": "MEME_SET_SEARCH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/meme.actions.ts",
                "type": "",
                "defaultValue": "createAction('[MEME] SET Search',props<{search: string}>())"
            },
            {
                "name": "MEME_TRENDING_ERROR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/meme.actions.ts",
                "type": "",
                "defaultValue": "createAction('[MEME] Trending Error',props<{msg: string}>())"
            },
            {
                "name": "MEME_TRENDING_FINISH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/meme.actions.ts",
                "type": "",
                "defaultValue": "createAction('[MEME] Trending Finished',props<{data: GIF[], pagination: GiphyPagination}>())"
            },
            {
                "name": "MEME_TRENDING_START",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/actions/meme.actions.ts",
                "type": "",
                "defaultValue": "createAction('[MEME] Get Trending')"
            },
            {
                "name": "memeFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "string",
                "defaultValue": "'meme'"
            },
            {
                "name": "memeFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "string",
                "defaultValue": "'meme'"
            },
            {
                "name": "memeReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(MemeActions.MEME_TRENDING_START, (state) => ({ ...state, loading: true })),\r\n    on(MemeActions.MEME_TRENDING_FINISH , (state, action) => (adapter.addMany(action.data, { ...state, pagination: { ...action.pagination }, loading: false }))),\r\n    on(MemeActions.MEME_SET_ID, (state, action) => ({...state, selectedId: action.id})),\r\n    on(MemeActions.MEME_CLEAR_ITEMS_THEN_SEARCH , (state) => (adapter.removeAll({...state, pagination: initialState.pagination, search: initialState.search}))),\r\n    on(MemeActions.MEME_CLEAR_ITEMS , (state) => (adapter.removeAll({...state, pagination: initialState.pagination, search: initialState.search}))),\r\n    on(MemeActions.MEME_SET_SEARCH, (state, action) => ({...state, search: action.search})),\r\n    on(MemeActions.MEME_SEARCH_START, (state) => ({...state, loading: true})),    \r\n    on(MemeActions.MEME_SEARCH_FINISH , (state, action) => (adapter.addMany(action.data, { ...state, pagination: { ...action.pagination }, loading: false }))),\r\n)"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.reducer.ts",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production\r\n    ? [logger,clearState]\r\n    : [clearState]",
                "description": "<p>By default, @ngrx/store uses combineReducers with the reducer map to compose\nthe root meta-reducer. To add more meta-reducers, provide an array of meta-reducers\nthat will be composed to form the root meta-reducer.</p>\n"
            },
            {
                "name": "namespace",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.actions.ts",
                "type": "string",
                "defaultValue": "'[Auth] '"
            },
            {
                "name": "NOT_LOGGED_IN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(namespace + 'Not Logged In')"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/charting.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(ChartingActions.GET_COVID_DATA_START, state => ({ ...state, loading: true })),\r\n    on(ChartingActions.GET_COVID_DATA_SUCCESS, (state, action) => ({...state, loading: false, everLoaded: true, covidData: [...action.data]})),\r\n    on(ChartingActions.GET_COVID_DATA_FAILURE,(state, action) => ({...state, loading: false, error: action.errorMsg})),\r\n    on(ChartingActions.SET_DATE_RANGE,(state,action)=>({...state,startDate: action.sd, endDate: action.ed})),\r\n    on(ChartingActions.SET_START_DATE,(state,action)=>({...state,startDate: action.sd})),\r\n    on(ChartingActions.SET_END_DATE,(state,action)=>({...state,endDate: action.ed})),\r\n    on(ChartingActions.SET_CURRENT_SELECTION,(state,action) => ({...state, loading: true,selected: action.selection}))\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/auth.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n    initialState,\r\n    on(\r\n        AuthActions.SIGNUP_START,\r\n        (state) => ({...state, loading: true, errorMsg: initialState.errorMsg}),\r\n    ),    \r\n    on(\r\n        AuthActions.LOGIN_START,\r\n        (state) => ({...state, loading: true, errorMsg: initialState.errorMsg}),\r\n    ),\r\n    on(\r\n        AuthActions.LOGIN_SUCCESS,\r\n        (state, action) => ({...state, user: action.user, loading: false, loggedIn: true, errorMsg: initialState.errorMsg}),\r\n    ),  \r\n    on(\r\n        AuthActions.AUTOLOGIN_SUCCESS,\r\n        (state, action) => ({...state, user: action.user, loading: false, loggedIn: true, errorMsg: initialState.errorMsg}),\r\n    ),      \r\n    on(\r\n        AuthActions.LOGOUT,\r\n        (state) => ({...initialState})\r\n    ),\r\n    on(\r\n        AuthActions.LOGIN_FAILURE,\r\n        (state, action) => ({...state, loading: false, errorMsg: action.error})\r\n    )\r\n)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "ROOT_REDUCERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.reducer.ts",
                "type": "",
                "defaultValue": "new InjectionToken<\r\n ActionReducerMap<State, Action>\r\n>('Root reducers token', {\r\n factory: () => ({   \r\n   router: fromRouter.routerReducer,\r\n }),\r\n})",
                "description": "<p>Our state is composed of a map of action reducer functions.\nThese reducer functions are called with each dispatched action\nand the current or initial state and return a new immutable state.</p>\n"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAllChartingData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCovidData,\r\n  selectStartDateToDate,\r\n  selectEndDateToDate,\r\n  (d: CovidData[], sd: Date, ed: Date) => {\r\n    const dateFilteredData = d.filter((a) => { return a.date >= sd && a.date <= ed });\r\n    return {\r\n      [CovidChartTypes.Deaths]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Deaths)), label: CovidData.getLabel(CovidChartTypes.Deaths), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Deaths, true)), label: CovidData.getLabel(CovidChartTypes.Deaths, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Hospitalized]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Hospitalized)), label: CovidData.getLabel(CovidChartTypes.Hospitalized), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Hospitalized, true)), label: CovidData.getLabel(CovidChartTypes.Hospitalized, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Infections]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Infections)), label: CovidData.getLabel(CovidChartTypes.Infections), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Infections, true)), label: CovidData.getLabel(CovidChartTypes.Infections, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Tests]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Tests)), label: CovidData.getLabel(CovidChartTypes.Tests), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Tests, true)), label: CovidData.getLabel(CovidChartTypes.Tests, true), type: \"bar\", yAxisID: 'right-axis' }]\r\n    }\r\n  }\r\n)"
            },
            {
                "name": "selectAllFavorites",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "",
                "defaultValue": "selectAll"
            },
            {
                "name": "selectAllFavorites",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectAllFavorites\r\n)"
            },
            {
                "name": "selectAllMemes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectAllMemes\r\n)"
            },
            {
                "name": "selectAllMemes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "selectAll"
            },
            {
                "name": "selectAuthError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectAuthState,\r\n    fromAuth.getError\r\n  )"
            },
            {
                "name": "selectAuthLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectAuthState,\r\n    fromAuth.getLoading\r\n  )"
            },
            {
                "name": "selectAuthLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectAuthState,\r\n    fromAuth.getLoggedIn\r\n  )"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectChartFeatureState,\r\n    (state) => state.authState\r\n  )"
            },
            {
                "name": "selectAuthUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectAuthState,\r\n    fromAuth.getUser\r\n  )"
            },
            {
                "name": "selectChartFeatureState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/reducers/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<State, AuthState>(\r\n    authFeatureKey\r\n)",
                "description": "<p>The createFeatureSelector function selects a piece of state from the root of the state object.\nThis is used for selecting feature states that are loaded eagerly or lazily.</p>\n"
            },
            {
                "name": "selectChartingChartLabels",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCovidData,\r\n  selectStartDateToDate,\r\n  selectEndDateToDate,\r\n  (d: CovidData[], sd: Date, ed: Date) => { return d.filter((a) => { return a.date >= sd && a.date <= ed }).map(i => moment(i.date)) }\r\n)"
            },
            {
                "name": "selectChartingDataForDeaths",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Deaths];\r\n  }\r\n)"
            },
            {
                "name": "selectChartingDataForHospitalized",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Hospitalized];\r\n  }\r\n)"
            },
            {
                "name": "selectChartingDataForInfected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Infections];\r\n  }\r\n)"
            },
            {
                "name": "selectChartingDataForSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[st];\r\n  }\r\n)"
            },
            {
                "name": "selectChartingDataForTests",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Tests];\r\n  }\r\n)"
            },
            {
                "name": "selectChartingError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getError\r\n)"
            },
            {
                "name": "selectChartingEverLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getEverLoaded\r\n)"
            },
            {
                "name": "selectChartingLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getLoading\r\n)"
            },
            {
                "name": "selectChartingState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectChartState,\r\n  (state) => state.charting\r\n)"
            },
            {
                "name": "selectChartState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<State, ChartState>(\r\n  chartFeatureKey\r\n)",
                "description": "<p>The createFeatureSelector function selects a piece of state from the root of the state object.\nThis is used for selecting feature states that are loaded eagerly or lazily.</p>\n"
            },
            {
                "name": "selectChartTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectSelected,\r\n  selectSelectedType,\r\n  (selected: string, selectedType: string) => `${selectedType} for ${state_hash[selected]}`\r\n)"
            },
            {
                "name": "selectCovidData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getCovidData\r\n)"
            },
            {
                "name": "selectCurrentMeme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemeEntities,\r\n    selectMemeSelectedId,\r\n    (memeEntities, memeId) => memeEntities[memeId]\r\n)"
            },
            {
                "name": "selectEndDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getEndDate\r\n)"
            },
            {
                "name": "selectEndDateToDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectEndDate,\r\n  (d: string) => { return new Date(d) }\r\n)"
            },
            {
                "name": "selectFavoriteEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "",
                "defaultValue": "selectEntities"
            },
            {
                "name": "selectFavoriteIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "",
                "defaultValue": "selectIds"
            },
            {
                "name": "selectFavoritesEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteEntities\r\n)"
            },
            {
                "name": "selectFavoritesIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteIds    \r\n)"
            },
            {
                "name": "selectFavoritesIdsAsStringArray",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFavoritesIds,\r\n    (ids: Array<string>) => ids \r\n)"
            },
            {
                "name": "selectFavoriteState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemesState,\r\n    (state) => state.favorites\r\n)"
            },
            {
                "name": "selectFavoritesTotal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteTotal\r\n)"
            },
            {
                "name": "selectFavoriteTotal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "",
                "defaultValue": "selectTotal"
            },
            {
                "name": "selectMemeAndTotalSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemeSearch,\r\n    selectMemeTotal,\r\n    (term, total) => { return {term, total}}\r\n)"
            },
            {
                "name": "selectMemeEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeEntities\r\n)"
            },
            {
                "name": "selectMemeEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "selectEntities"
            },
            {
                "name": "selectMemeError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.getError\r\n)"
            },
            {
                "name": "selectMemeIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeIds // shorthand for usersState => fromUser.selectUserIds(usersState)\r\n)"
            },
            {
                "name": "selectMemeIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "selectIds"
            },
            {
                "name": "selectMemeLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.getLoading\r\n)"
            },
            {
                "name": "selectMemeOffset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.getOffset\r\n)"
            },
            {
                "name": "selectMemeSearch",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.getSearch\r\n)"
            },
            {
                "name": "selectMemeSelectedId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.getSelectedId\r\n)"
            },
            {
                "name": "selectMemesState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<State, MemeState>(\r\n    memeFeatureKey\r\n)"
            },
            {
                "name": "selectMemeState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemesState,\r\n    (state) => state.meme\r\n)"
            },
            {
                "name": "selectMemesWithFavorites",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectAllMemes,\r\n    selectFavoritesIds,\r\n    (memes, favorites: Array<string>) =>  memes.map(a => ({\r\n        ...a,\r\n        is_favorite: favorites.includes(a.id as string)   \r\n    }))\r\n)"
            },
            {
                "name": "selectMemeTotal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeTotal\r\n)"
            },
            {
                "name": "selectMemeTotal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "selectTotal"
            },
            {
                "name": "selectRouter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.reducer.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<\r\n State,\r\n fromRouter.RouterReducerState\r\n>('router')",
                "description": "<p>Router Selectors</p>\n"
            },
            {
                "name": "selectSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getSelected\r\n)"
            },
            {
                "name": "selectSelectedType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getSelectedType\r\n)"
            },
            {
                "name": "selectStartDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getStartDate\r\n)"
            },
            {
                "name": "selectStartDateToDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/reducers/index.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectStartDate,\r\n  (d: string) => { return new Date(d) }\r\n)"
            },
            {
                "name": "SET_CURRENT_SELECTION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/actions/charting.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Charting] Set Current Selection', props<{selection: string}>())"
            },
            {
                "name": "SET_DATE_RANGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/actions/charting.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Charting] set Date range', props<{sd: string, ed: string}>())"
            },
            {
                "name": "SET_END_DATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/actions/charting.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Charting] set  End Date', props<{ed: string}>())"
            },
            {
                "name": "SET_START_DATE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/charting/actions/charting.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Charting] set Start Date', props<{sd: string}>())"
            },
            {
                "name": "SIGNUP_START",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n    namespace + 'Signup Start',\r\n    props<{signup: loginUser}>()\r\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "state_hash",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/states.ts",
                "type": "object",
                "defaultValue": "{\r\n    'AL': 'Alabama',\r\n    'AK': 'Alaska',\r\n    'AS': 'American Samoa',\r\n    'AZ': 'Arizona',\r\n    'AR': 'Arkansas',\r\n    'CA': 'California',\r\n    'CO': 'Colorado',\r\n    'CT': 'Connecticut',\r\n    'DE': 'Delaware',\r\n    'DC': 'District Of Columbia',\r\n    'FM': 'Federated States Of Micronesia',\r\n    'FL': 'Florida',\r\n    'GA': 'Georgia',\r\n    'GU': 'Guam',\r\n    'HI': 'Hawaii',\r\n    'ID': 'Idaho',\r\n    'IL': 'Illinois',\r\n    'IN': 'Indiana',\r\n    'IA': 'Iowa',\r\n    'KS': 'Kansas',\r\n    'KY': 'Kentucky',\r\n    'LA': 'Louisiana',\r\n    'ME': 'Maine',\r\n    'MH': 'Marshall Islands',\r\n    'MD': 'Maryland',\r\n    'MA': 'Massachusetts',\r\n    'MI': 'Michigan',\r\n    'MN': 'Minnesota',\r\n    'MS': 'Mississippi',\r\n    'MO': 'Missouri',\r\n    'MT': 'Montana',\r\n    'NE': 'Nebraska',\r\n    'NV': 'Nevada',\r\n    'NH': 'New Hampshire',\r\n    'NJ': 'New Jersey',\r\n    'NM': 'New Mexico',\r\n    'NY': 'New York',\r\n    'NC': 'North Carolina',\r\n    'ND': 'North Dakota',\r\n    'MP': 'Northern Mariana Islands',\r\n    'OH': 'Ohio',\r\n    'OK': 'Oklahoma',\r\n    'OR': 'Oregon',\r\n    'PW': 'Palau',\r\n    'PA': 'Pennsylvania',\r\n    'PR': 'Puerto Rico',\r\n    'RI': 'Rhode Island',\r\n    'SC': 'South Carolina',\r\n    'SD': 'South Dakota',\r\n    'TN': 'Tennessee',\r\n    'TX': 'Texas',\r\n    'UT': 'Utah',\r\n    'VT': 'Vermont',\r\n    'VI': 'Virgin Islands',\r\n    'VA': 'Virginia',\r\n    'WA': 'Washington',\r\n    'WV': 'West Virginia',\r\n    'WI': 'Wisconsin',\r\n    'WY': 'Wyoming',\r\n    'US': 'United States'\r\n  }"
            },
            {
                "name": "stateAPIURL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "",
                "defaultValue": "(state) => `https://api.covidtracking.com/v1/states/${state}/daily.json`"
            },
            {
                "name": "stateAPIURL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "",
                "defaultValue": "(state) => `https://api.covidtracking.com/v1/states/${state}/daily.json`"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.reducer.ts",
                "type": "",
                "defaultValue": "fromRouter.getSelectors(selectRouter)"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            }
        ],
        "functions": [
            {
                "name": "clearState",
                "file": "src/app/store/app.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "reducer"
                    }
                ],
                "returnType": "ActionReducer<State>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "enumSelector",
                "file": "src/app/core/states.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "definition",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "definition",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "logger",
                "file": "src/app/store/app.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "reducer"
                    }
                ],
                "returnType": "ActionReducer<State>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/meme/reducers/favorites.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/meme/reducers/meme.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducers",
                "file": "src/app/charting/reducers/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Provide reducer in AoT-compilation happy way </p>\n",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducers",
                "file": "src/app/auth/reducers/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Provide reducer in AoT-compilation happy way </p>\n",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducers",
                "file": "src/app/meme/reducers/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "<p>Provide reducer in AoT-compilation happy way </p>\n",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ImageAllTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/meme/models/GIF.model.ts",
                "description": "",
                "kind": 169
            }
        ],
        "enumerations": [
            {
                "name": "CovidChartTypes",
                "childs": [
                    {
                        "name": "Infections",
                        "value": "Infections"
                    },
                    {
                        "name": "Hospitalized",
                        "value": "Hospitalized"
                    },
                    {
                        "name": "Deaths",
                        "value": "Deaths"
                    },
                    {
                        "name": "Tests",
                        "value": "Tests"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/charting/models/CovidChartTypes.ts"
            }
        ],
        "groupedVariables": {
            "src/app/meme/reducers/favorites.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/favorites.reducer.ts",
                    "type": "EntityAdapter<GIF>",
                    "defaultValue": "createEntityAdapter<GIF>({})"
                },
                {
                    "name": "favoriteFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/favorites.reducer.ts",
                    "type": "string",
                    "defaultValue": "'favorites'"
                },
                {
                    "name": "favoriteReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/favorites.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(FavoritesActions.FAVORITE_ADD, (state, action) => (adapter.addOne(action.data,{...state}))),        \r\n    on(FavoritesActions.FAVORITE_REMOVE, (state, action) => (adapter.removeOne(action.id, {...state})))\r\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/favorites.reducer.ts",
                    "type": "State",
                    "defaultValue": "adapter.getInitialState({\r\n    entities: {},\r\n    ids: []   \r\n})"
                },
                {
                    "name": "selectAllFavorites",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/favorites.reducer.ts",
                    "type": "",
                    "defaultValue": "selectAll"
                },
                {
                    "name": "selectFavoriteEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/favorites.reducer.ts",
                    "type": "",
                    "defaultValue": "selectEntities"
                },
                {
                    "name": "selectFavoriteIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/favorites.reducer.ts",
                    "type": "",
                    "defaultValue": "selectIds"
                },
                {
                    "name": "selectFavoriteTotal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/favorites.reducer.ts",
                    "type": "",
                    "defaultValue": "selectTotal"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/favorites.reducer.ts",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/meme/reducers/meme.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "EntityAdapter<GIF>",
                    "defaultValue": "createEntityAdapter<GIF>({})"
                },
                {
                    "name": "getCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.pagination.count"
                },
                {
                    "name": "getError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.error"
                },
                {
                    "name": "getLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.loading"
                },
                {
                    "name": "getOffset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.pagination.offset"
                },
                {
                    "name": "getSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.search"
                },
                {
                    "name": "getSelectedId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.selectedId"
                },
                {
                    "name": "getTotalCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.pagination.total_count"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "State",
                    "defaultValue": "adapter.getInitialState({\r\n    entities: {},\r\n    ids: [],\r\n    pagination: { offset: 0, total_count: 0, count: 0, },\r\n    search: \"\",\r\n    loading: false,\r\n    error: \"\",\r\n    selectedId: null\r\n})"
                },
                {
                    "name": "memeFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "string",
                    "defaultValue": "'meme'"
                },
                {
                    "name": "memeReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(MemeActions.MEME_TRENDING_START, (state) => ({ ...state, loading: true })),\r\n    on(MemeActions.MEME_TRENDING_FINISH , (state, action) => (adapter.addMany(action.data, { ...state, pagination: { ...action.pagination }, loading: false }))),\r\n    on(MemeActions.MEME_SET_ID, (state, action) => ({...state, selectedId: action.id})),\r\n    on(MemeActions.MEME_CLEAR_ITEMS_THEN_SEARCH , (state) => (adapter.removeAll({...state, pagination: initialState.pagination, search: initialState.search}))),\r\n    on(MemeActions.MEME_CLEAR_ITEMS , (state) => (adapter.removeAll({...state, pagination: initialState.pagination, search: initialState.search}))),\r\n    on(MemeActions.MEME_SET_SEARCH, (state, action) => ({...state, search: action.search})),\r\n    on(MemeActions.MEME_SEARCH_START, (state) => ({...state, loading: true})),    \r\n    on(MemeActions.MEME_SEARCH_FINISH , (state, action) => (adapter.addMany(action.data, { ...state, pagination: { ...action.pagination }, loading: false }))),\r\n)"
                },
                {
                    "name": "selectAllMemes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "selectAll"
                },
                {
                    "name": "selectMemeEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "selectEntities"
                },
                {
                    "name": "selectMemeIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "selectIds"
                },
                {
                    "name": "selectMemeTotal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "selectTotal"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/auth/reducers/index.ts": [
                {
                    "name": "authFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/index.ts",
                    "type": "string",
                    "defaultValue": "'auth'"
                },
                {
                    "name": "selectAuthError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectAuthState,\r\n    fromAuth.getError\r\n  )"
                },
                {
                    "name": "selectAuthLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectAuthState,\r\n    fromAuth.getLoading\r\n  )"
                },
                {
                    "name": "selectAuthLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectAuthState,\r\n    fromAuth.getLoggedIn\r\n  )"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectChartFeatureState,\r\n    (state) => state.authState\r\n  )"
                },
                {
                    "name": "selectAuthUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectAuthState,\r\n    fromAuth.getUser\r\n  )"
                },
                {
                    "name": "selectChartFeatureState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State, AuthState>(\r\n    authFeatureKey\r\n)",
                    "description": "<p>The createFeatureSelector function selects a piece of state from the root of the state object.\nThis is used for selecting feature states that are loaded eagerly or lazily.</p>\n"
                }
            ],
            "src/app/auth/reducers/auth.reducer.ts": [
                {
                    "name": "authStateFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "string",
                    "defaultValue": "'authState'"
                },
                {
                    "name": "getError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.errorMsg"
                },
                {
                    "name": "getLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.loading"
                },
                {
                    "name": "getLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.loggedIn"
                },
                {
                    "name": "getUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.user"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n    user: null,\r\n    loading: false,\r\n    loggedIn: false,\r\n    errorMsg: null\r\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/reducers/auth.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(\r\n        AuthActions.SIGNUP_START,\r\n        (state) => ({...state, loading: true, errorMsg: initialState.errorMsg}),\r\n    ),    \r\n    on(\r\n        AuthActions.LOGIN_START,\r\n        (state) => ({...state, loading: true, errorMsg: initialState.errorMsg}),\r\n    ),\r\n    on(\r\n        AuthActions.LOGIN_SUCCESS,\r\n        (state, action) => ({...state, user: action.user, loading: false, loggedIn: true, errorMsg: initialState.errorMsg}),\r\n    ),  \r\n    on(\r\n        AuthActions.AUTOLOGIN_SUCCESS,\r\n        (state, action) => ({...state, user: action.user, loading: false, loggedIn: true, errorMsg: initialState.errorMsg}),\r\n    ),      \r\n    on(\r\n        AuthActions.LOGOUT,\r\n        (state) => ({...initialState})\r\n    ),\r\n    on(\r\n        AuthActions.LOGIN_FAILURE,\r\n        (state, action) => ({...state, loading: false, errorMsg: action.error})\r\n    )\r\n)"
                }
            ],
            "src/app/auth/actions/auth.actions.ts": [
                {
                    "name": "AUTOLOGIN_START",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    namespace + 'Auto Login Start'\r\n)"
                },
                {
                    "name": "AUTOLOGIN_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    namespace + 'Auto Login Success',\r\n    props<{user: User}>()\r\n)"
                },
                {
                    "name": "LOGIN_FAILURE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    namespace + 'Login Failure',\r\n    props<{error: string}>()\r\n)"
                },
                {
                    "name": "LOGIN_RESPONSE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    namespace + 'Login Response',\r\n    props<{user: loginResult}>()\r\n)"
                },
                {
                    "name": "LOGIN_START",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    namespace + 'Login Start',\r\n    props<{signup: loginUser}>()\r\n)"
                },
                {
                    "name": "LOGIN_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    namespace + 'Login Success',\r\n    props<{user: User}>()\r\n)"
                },
                {
                    "name": "LOGOUT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    namespace + 'Logout'    \r\n)"
                },
                {
                    "name": "namespace",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Auth] '"
                },
                {
                    "name": "NOT_LOGGED_IN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(namespace + 'Not Logged In')"
                },
                {
                    "name": "SIGNUP_START",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n    namespace + 'Signup Start',\r\n    props<{signup: loginUser}>()\r\n)"
                }
            ],
            "src/app/charting/reducers/index.ts": [
                {
                    "name": "chartFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "string",
                    "defaultValue": "'chart'"
                },
                {
                    "name": "selectAllChartingData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCovidData,\r\n  selectStartDateToDate,\r\n  selectEndDateToDate,\r\n  (d: CovidData[], sd: Date, ed: Date) => {\r\n    const dateFilteredData = d.filter((a) => { return a.date >= sd && a.date <= ed });\r\n    return {\r\n      [CovidChartTypes.Deaths]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Deaths)), label: CovidData.getLabel(CovidChartTypes.Deaths), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Deaths, true)), label: CovidData.getLabel(CovidChartTypes.Deaths, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Hospitalized]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Hospitalized)), label: CovidData.getLabel(CovidChartTypes.Hospitalized), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Hospitalized, true)), label: CovidData.getLabel(CovidChartTypes.Hospitalized, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Infections]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Infections)), label: CovidData.getLabel(CovidChartTypes.Infections), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Infections, true)), label: CovidData.getLabel(CovidChartTypes.Infections, true), type: \"bar\", yAxisID: 'right-axis' }],\r\n      [CovidChartTypes.Tests]: [{ data: dateFilteredData.map(i => i.getData(CovidChartTypes.Tests)), label: CovidData.getLabel(CovidChartTypes.Tests), type: \"line\", yAxisID: 'left-axis' },\r\n      { data: dateFilteredData.map(i => i.getData(CovidChartTypes.Tests, true)), label: CovidData.getLabel(CovidChartTypes.Tests, true), type: \"bar\", yAxisID: 'right-axis' }]\r\n    }\r\n  }\r\n)"
                },
                {
                    "name": "selectChartingChartLabels",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCovidData,\r\n  selectStartDateToDate,\r\n  selectEndDateToDate,\r\n  (d: CovidData[], sd: Date, ed: Date) => { return d.filter((a) => { return a.date >= sd && a.date <= ed }).map(i => moment(i.date)) }\r\n)"
                },
                {
                    "name": "selectChartingDataForDeaths",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Deaths];\r\n  }\r\n)"
                },
                {
                    "name": "selectChartingDataForHospitalized",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Hospitalized];\r\n  }\r\n)"
                },
                {
                    "name": "selectChartingDataForInfected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Infections];\r\n  }\r\n)"
                },
                {
                    "name": "selectChartingDataForSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[st];\r\n  }\r\n)"
                },
                {
                    "name": "selectChartingDataForTests",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllChartingData,\r\n  selectSelectedType,\r\n  (d, st: string) => {\r\n    return d[CovidChartTypes.Tests];\r\n  }\r\n)"
                },
                {
                    "name": "selectChartingError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getError\r\n)"
                },
                {
                    "name": "selectChartingEverLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getEverLoaded\r\n)"
                },
                {
                    "name": "selectChartingLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getLoading\r\n)"
                },
                {
                    "name": "selectChartingState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectChartState,\r\n  (state) => state.charting\r\n)"
                },
                {
                    "name": "selectChartState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State, ChartState>(\r\n  chartFeatureKey\r\n)",
                    "description": "<p>The createFeatureSelector function selects a piece of state from the root of the state object.\nThis is used for selecting feature states that are loaded eagerly or lazily.</p>\n"
                },
                {
                    "name": "selectChartTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectSelected,\r\n  selectSelectedType,\r\n  (selected: string, selectedType: string) => `${selectedType} for ${state_hash[selected]}`\r\n)"
                },
                {
                    "name": "selectCovidData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getCovidData\r\n)"
                },
                {
                    "name": "selectEndDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getEndDate\r\n)"
                },
                {
                    "name": "selectEndDateToDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectEndDate,\r\n  (d: string) => { return new Date(d) }\r\n)"
                },
                {
                    "name": "selectSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getSelected\r\n)"
                },
                {
                    "name": "selectSelectedType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getSelectedType\r\n)"
                },
                {
                    "name": "selectStartDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectChartingState,\r\n  fromCharting.getStartDate\r\n)"
                },
                {
                    "name": "selectStartDateToDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectStartDate,\r\n  (d: string) => { return new Date(d) }\r\n)"
                }
            ],
            "src/app/charting/reducers/charting.reducer.ts": [
                {
                    "name": "chartingFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/charting.reducer.ts",
                    "type": "string",
                    "defaultValue": "'charting'"
                },
                {
                    "name": "getCovidData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/charting.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.covidData"
                },
                {
                    "name": "getEndDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/charting.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.endDate"
                },
                {
                    "name": "getError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/charting.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.error"
                },
                {
                    "name": "getEverLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/charting.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.everLoaded"
                },
                {
                    "name": "getLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/charting.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.loading"
                },
                {
                    "name": "getSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/charting.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.selected"
                },
                {
                    "name": "getSelectedType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/charting.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.selectedType"
                },
                {
                    "name": "getStartDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/charting.reducer.ts",
                    "type": "",
                    "defaultValue": "(state: State) => state.startDate"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/charting.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n    everLoaded: false,\r\n    error: null,\r\n    loading: false,\r\n    covidData: [],    \r\n    selected: 'US',\r\n    startDate: '01/01/2020',\r\n    endDate: '03/08/2021',\r\n    selectedType:  CovidChartTypes.Deaths\r\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/reducers/charting.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n    initialState,\r\n    on(ChartingActions.GET_COVID_DATA_START, state => ({ ...state, loading: true })),\r\n    on(ChartingActions.GET_COVID_DATA_SUCCESS, (state, action) => ({...state, loading: false, everLoaded: true, covidData: [...action.data]})),\r\n    on(ChartingActions.GET_COVID_DATA_FAILURE,(state, action) => ({...state, loading: false, error: action.errorMsg})),\r\n    on(ChartingActions.SET_DATE_RANGE,(state,action)=>({...state,startDate: action.sd, endDate: action.ed})),\r\n    on(ChartingActions.SET_START_DATE,(state,action)=>({...state,startDate: action.sd})),\r\n    on(ChartingActions.SET_END_DATE,(state,action)=>({...state,endDate: action.ed})),\r\n    on(ChartingActions.SET_CURRENT_SELECTION,(state,action) => ({...state, loading: true,selected: action.selection}))\r\n)"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  nationalAPIURL: 'https://api.covidtracking.com/v1/us/daily.json',  \n  signInURL: 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBJqVnwW4N_lXqqpEEMTCXjvcXmzJTSNPE',\n  API_KEY: 'AIzaSyBJqVnwW4N_lXqqpEEMTCXjvcXmzJTSNPE',\n  GIPHY_API_KEY: '8fKQgxFhleNT0glKiICA1QzAgU77B94x',\n  GIPHY_API_URL_TRENDING: 'https://api.giphy.com/v1/gifs/trending',\n  GIPHY_API_URL_SEARCH: 'https://api.giphy.com/v1/gifs/search',\n  GIPHY_API_URL_AUTOCOMPLETE: 'https://api.giphy.com/v1/gifs/search/tags'  \n}"
                },
                {
                    "name": "GIPHY_API_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "",
                    "defaultValue": "(gif_id) => `https://api.giphy.com/v1/gifs/${gif_id}`"
                },
                {
                    "name": "stateAPIURL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "",
                    "defaultValue": "(state) => `https://api.covidtracking.com/v1/states/${state}/daily.json`"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  nationalAPIURL: 'https://api.covidtracking.com/v1/us/daily.json',  \n  signInURL: 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBJqVnwW4N_lXqqpEEMTCXjvcXmzJTSNPE',\n  API_KEY: 'AIzaSyBJqVnwW4N_lXqqpEEMTCXjvcXmzJTSNPE',\n  GIPHY_API_KEY: '8fKQgxFhleNT0glKiICA1QzAgU77B94x',\n  GIPHY_API_URL_TRENDING: 'https://api.giphy.com/v1/gifs/trending',\n  GIPHY_API_URL_SEARCH: 'https://api.giphy.com/v1/gifs/search',\n  GIPHY_API_URL_AUTOCOMPLETE: 'https://api.giphy.com/v1/gifs/search/tags'  \n}"
                },
                {
                    "name": "GIPHY_API_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "",
                    "defaultValue": "(gif_id) => `https://api.giphy.com/v1/gifs/${gif_id}`"
                },
                {
                    "name": "stateAPIURL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "",
                    "defaultValue": "(state) => `https://api.covidtracking.com/v1/states/${state}/daily.json`"
                }
            ],
            "src/app/meme/actions/favorites.actions.ts": [
                {
                    "name": "FAVORITE_ADD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/favorites.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Favorite] Add One',props<{data: GIF}>())"
                },
                {
                    "name": "FAVORITE_REMOVE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/favorites.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Favorite] Remove One',props<{id: string}>())"
                }
            ],
            "src/app/charting/actions/charting.actions.ts": [
                {
                    "name": "GET_COVID_DATA_FAILURE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/actions/charting.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Charting] Get COVID Data Failure', props<{errorMsg: string}>())"
                },
                {
                    "name": "GET_COVID_DATA_START",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/actions/charting.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Charting] Get COVID Data')"
                },
                {
                    "name": "GET_COVID_DATA_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/actions/charting.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Charting] Get COVID Data Success', props<{data: CovidData[]}>())"
                },
                {
                    "name": "SET_CURRENT_SELECTION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/actions/charting.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Charting] Set Current Selection', props<{selection: string}>())"
                },
                {
                    "name": "SET_DATE_RANGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/actions/charting.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Charting] set Date range', props<{sd: string, ed: string}>())"
                },
                {
                    "name": "SET_END_DATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/actions/charting.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Charting] set  End Date', props<{ed: string}>())"
                },
                {
                    "name": "SET_START_DATE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/charting/actions/charting.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Charting] set Start Date', props<{sd: string}>())"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/meme/actions/meme.actions.ts": [
                {
                    "name": "MEME_CLEAR_ITEMS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/meme.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[MEME] Clear Items')"
                },
                {
                    "name": "MEME_CLEAR_ITEMS_THEN_SEARCH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/meme.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[MEME] Clear Items Then Search',props<{search: string}>())"
                },
                {
                    "name": "MEME_SEARCH_ERROR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/meme.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[MEME] Search Error',props<{msg: string}>())"
                },
                {
                    "name": "MEME_SEARCH_FINISH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/meme.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[MEME] Search Finish',props<{data: GIF[], pagination: GiphyPagination}>())"
                },
                {
                    "name": "MEME_SEARCH_START",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/meme.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[MEME] Get Search')"
                },
                {
                    "name": "MEME_SET_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/meme.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[MEME] Set Meme Id',props<{id: string}>())"
                },
                {
                    "name": "MEME_SET_SEARCH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/meme.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[MEME] SET Search',props<{search: string}>())"
                },
                {
                    "name": "MEME_TRENDING_ERROR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/meme.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[MEME] Trending Error',props<{msg: string}>())"
                },
                {
                    "name": "MEME_TRENDING_FINISH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/meme.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[MEME] Trending Finished',props<{data: GIF[], pagination: GiphyPagination}>())"
                },
                {
                    "name": "MEME_TRENDING_START",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/actions/meme.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[MEME] Get Trending')"
                }
            ],
            "src/app/meme/reducers/index.ts": [
                {
                    "name": "memeFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "string",
                    "defaultValue": "'meme'"
                },
                {
                    "name": "selectAllFavorites",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectAllFavorites\r\n)"
                },
                {
                    "name": "selectAllMemes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectAllMemes\r\n)"
                },
                {
                    "name": "selectCurrentMeme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemeEntities,\r\n    selectMemeSelectedId,\r\n    (memeEntities, memeId) => memeEntities[memeId]\r\n)"
                },
                {
                    "name": "selectFavoritesEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteEntities\r\n)"
                },
                {
                    "name": "selectFavoritesIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteIds    \r\n)"
                },
                {
                    "name": "selectFavoritesIdsAsStringArray",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFavoritesIds,\r\n    (ids: Array<string>) => ids \r\n)"
                },
                {
                    "name": "selectFavoriteState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemesState,\r\n    (state) => state.favorites\r\n)"
                },
                {
                    "name": "selectFavoritesTotal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectFavoriteState,\r\n    fromFavorites.selectFavoriteTotal\r\n)"
                },
                {
                    "name": "selectMemeAndTotalSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemeSearch,\r\n    selectMemeTotal,\r\n    (term, total) => { return {term, total}}\r\n)"
                },
                {
                    "name": "selectMemeEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeEntities\r\n)"
                },
                {
                    "name": "selectMemeError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.getError\r\n)"
                },
                {
                    "name": "selectMemeIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeIds // shorthand for usersState => fromUser.selectUserIds(usersState)\r\n)"
                },
                {
                    "name": "selectMemeLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.getLoading\r\n)"
                },
                {
                    "name": "selectMemeOffset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.getOffset\r\n)"
                },
                {
                    "name": "selectMemeSearch",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.getSearch\r\n)"
                },
                {
                    "name": "selectMemeSelectedId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.getSelectedId\r\n)"
                },
                {
                    "name": "selectMemesState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State, MemeState>(\r\n    memeFeatureKey\r\n)"
                },
                {
                    "name": "selectMemeState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemesState,\r\n    (state) => state.meme\r\n)"
                },
                {
                    "name": "selectMemesWithFavorites",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectAllMemes,\r\n    selectFavoritesIds,\r\n    (memes, favorites: Array<string>) =>  memes.map(a => ({\r\n        ...a,\r\n        is_favorite: favorites.includes(a.id as string)   \r\n    }))\r\n)"
                },
                {
                    "name": "selectMemeTotal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/meme/reducers/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    selectMemeState,\r\n    fromMeme.selectMemeTotal\r\n)"
                }
            ],
            "src/app/store/app.reducer.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.reducer.ts",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production\r\n    ? [logger,clearState]\r\n    : [clearState]",
                    "description": "<p>By default, @ngrx/store uses combineReducers with the reducer map to compose\nthe root meta-reducer. To add more meta-reducers, provide an array of meta-reducers\nthat will be composed to form the root meta-reducer.</p>\n"
                },
                {
                    "name": "ROOT_REDUCERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.reducer.ts",
                    "type": "",
                    "defaultValue": "new InjectionToken<\r\n ActionReducerMap<State, Action>\r\n>('Root reducers token', {\r\n factory: () => ({   \r\n   router: fromRouter.routerReducer,\r\n }),\r\n})",
                    "description": "<p>Our state is composed of a map of action reducer functions.\nThese reducer functions are called with each dispatched action\nand the current or initial state and return a new immutable state.</p>\n"
                },
                {
                    "name": "selectRouter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.reducer.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<\r\n State,\r\n fromRouter.RouterReducerState\r\n>('router')",
                    "description": "<p>Router Selectors</p>\n"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.reducer.ts",
                    "type": "",
                    "defaultValue": "fromRouter.getSelectors(selectRouter)"
                }
            ],
            "src/app/core/states.ts": [
                {
                    "name": "state_hash",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/states.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    'AL': 'Alabama',\r\n    'AK': 'Alaska',\r\n    'AS': 'American Samoa',\r\n    'AZ': 'Arizona',\r\n    'AR': 'Arkansas',\r\n    'CA': 'California',\r\n    'CO': 'Colorado',\r\n    'CT': 'Connecticut',\r\n    'DE': 'Delaware',\r\n    'DC': 'District Of Columbia',\r\n    'FM': 'Federated States Of Micronesia',\r\n    'FL': 'Florida',\r\n    'GA': 'Georgia',\r\n    'GU': 'Guam',\r\n    'HI': 'Hawaii',\r\n    'ID': 'Idaho',\r\n    'IL': 'Illinois',\r\n    'IN': 'Indiana',\r\n    'IA': 'Iowa',\r\n    'KS': 'Kansas',\r\n    'KY': 'Kentucky',\r\n    'LA': 'Louisiana',\r\n    'ME': 'Maine',\r\n    'MH': 'Marshall Islands',\r\n    'MD': 'Maryland',\r\n    'MA': 'Massachusetts',\r\n    'MI': 'Michigan',\r\n    'MN': 'Minnesota',\r\n    'MS': 'Mississippi',\r\n    'MO': 'Missouri',\r\n    'MT': 'Montana',\r\n    'NE': 'Nebraska',\r\n    'NV': 'Nevada',\r\n    'NH': 'New Hampshire',\r\n    'NJ': 'New Jersey',\r\n    'NM': 'New Mexico',\r\n    'NY': 'New York',\r\n    'NC': 'North Carolina',\r\n    'ND': 'North Dakota',\r\n    'MP': 'Northern Mariana Islands',\r\n    'OH': 'Ohio',\r\n    'OK': 'Oklahoma',\r\n    'OR': 'Oregon',\r\n    'PW': 'Palau',\r\n    'PA': 'Pennsylvania',\r\n    'PR': 'Puerto Rico',\r\n    'RI': 'Rhode Island',\r\n    'SC': 'South Carolina',\r\n    'SD': 'South Dakota',\r\n    'TN': 'Tennessee',\r\n    'TX': 'Texas',\r\n    'UT': 'Utah',\r\n    'VT': 'Vermont',\r\n    'VI': 'Virgin Islands',\r\n    'VA': 'Virginia',\r\n    'WA': 'Washington',\r\n    'WV': 'West Virginia',\r\n    'WI': 'Wisconsin',\r\n    'WY': 'Wyoming',\r\n    'US': 'United States'\r\n  }"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/app.reducer.ts": [
                {
                    "name": "clearState",
                    "file": "src/app/store/app.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer"
                        }
                    ],
                    "returnType": "ActionReducer<State>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logger",
                    "file": "src/app/store/app.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer"
                        }
                    ],
                    "returnType": "ActionReducer<State>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/states.ts": [
                {
                    "name": "enumSelector",
                    "file": "src/app/core/states.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "definition",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "definition",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/meme/reducers/favorites.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/meme/reducers/favorites.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/meme/reducers/meme.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/meme/reducers/meme.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/charting/reducers/index.ts": [
                {
                    "name": "reducers",
                    "file": "src/app/charting/reducers/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Provide reducer in AoT-compilation happy way </p>\n",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/auth/reducers/index.ts": [
                {
                    "name": "reducers",
                    "file": "src/app/auth/reducers/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Provide reducer in AoT-compilation happy way </p>\n",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/meme/reducers/index.ts": [
                {
                    "name": "reducers",
                    "file": "src/app/meme/reducers/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "<p>Provide reducer in AoT-compilation happy way </p>\n",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/charting/models/CovidChartTypes.ts": [
                {
                    "name": "CovidChartTypes",
                    "childs": [
                        {
                            "name": "Infections",
                            "value": "Infections"
                        },
                        {
                            "name": "Hospitalized",
                            "value": "Hospitalized"
                        },
                        {
                            "name": "Deaths",
                            "value": "Deaths"
                        },
                        {
                            "name": "Tests",
                            "value": "Tests"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/charting/models/CovidChartTypes.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/meme/models/GIF.model.ts": [
                {
                    "name": "ImageAllTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/meme/models/GIF.model.ts",
                    "description": "",
                    "kind": 169
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/charting",
                        "pathMatch": "full"
                    },
                    {
                        "path": "charting",
                        "loadChildren": "./charting/charting.module#ChartingModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/charting/charting-routing.module.ts",
                                        "module": "ChartingRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ChartingComponent",
                                                "canActivate": [
                                                    "AuthGuard"
                                                ],
                                                "resolve": [
                                                    "ChartingDataResolver"
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "ChartingModule"
                            }
                        ]
                    },
                    {
                        "path": "meme",
                        "loadChildren": "./meme/meme.module#MemeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/meme/meme-routing.module.ts",
                                        "module": "MemeRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "MemeComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MemeModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/auth/auth-routing.module.ts",
                "module": "AuthRoutingModule",
                "children": [
                    {
                        "path": "auth",
                        "component": "AuthComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTOLOGIN_START",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTOLOGIN_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN_FAILURE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN_RESPONSE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN_START",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGIN_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LOGOUT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "namespace",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NOT_LOGGED_IN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SIGNUP_START",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/loginResult.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "loginResult",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/models/loginUser.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "loginUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authStateFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducers",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartFeatureState",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/charting/actions/charting.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_COVID_DATA_FAILURE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/actions/charting.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_COVID_DATA_START",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/actions/charting.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_COVID_DATA_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/actions/charting.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_CURRENT_SELECTION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/actions/charting.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_DATE_RANGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/actions/charting.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_END_DATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/actions/charting.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SET_START_DATE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/chart-presentation/chart-presentation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartPresentationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/charting.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/charting.resolver.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ChartingDataResolver",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/charting.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartingService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/effects/charting.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartingEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/models/CovidData.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CovidData",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/models/CovidData.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CovidDataInterface",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/models/NationalCovidDay.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NationalCovidDay",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/models/NationalCovidDay.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NationalCovidDayAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/models/StateCovidDay.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StateCovidDay",
                "coveragePercent": 0,
                "coverageCount": "0/58",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/models/StateCovidDay.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StateCovidDayAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "chartingFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCovidData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getEndDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getEverLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getStartDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/charting.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChartState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducers",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "chartFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllChartingData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartingChartLabels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartingDataForDeaths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartingDataForHospitalized",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartingDataForInfected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartingDataForSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartingDataForTests",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartingError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartingEverLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartingLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartingState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartState",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChartTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCovidData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEndDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEndDateToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStartDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/charting/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStartDateToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/adapter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Adapter",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/imagepreloader.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ImagePreloader",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/loading-spinner/loading-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/states.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "enumSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "state_hash",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/favorites.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FAVORITE_ADD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/favorites.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FAVORITE_REMOVE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/meme.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEME_CLEAR_ITEMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/meme.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEME_CLEAR_ITEMS_THEN_SEARCH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/meme.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEME_SEARCH_ERROR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/meme.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEME_SEARCH_FINISH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/meme.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEME_SEARCH_START",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/meme.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEME_SET_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/meme.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEME_SET_SEARCH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/meme.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEME_TRENDING_ERROR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/meme.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEME_TRENDING_FINISH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/actions/meme.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MEME_TRENDING_START",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/components/meme-display/meme-display.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemeDisplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/components/meme-search-bar-component/meme-search-bar-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemeSearchBarComponentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/containers/meme-display-container/meme-display-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemeDisplayContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/containers/meme-search-bar-container/meme-search-bar-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemeSearchBarContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/effects/meme.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MemeEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/meme.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MemeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/meme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MemeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/GIF.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GIF",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/GIF.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBottleData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/GIF.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IImage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/GIF.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IImages",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/GIF.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMP4",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/GIF.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRendition",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/GIF.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IURLAsset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/GIF.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IVideo",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/GIF.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IVideoAssets",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/GIF.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IWebP",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/GiphyResult.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GiphyResult",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/Meta.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GiphyMeta",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/pagination.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GiphyPagination",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IProfileUser",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPublicUser",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "favoriteFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "favoriteReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllFavorites",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFavoriteEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFavoriteIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFavoriteTotal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/favorites.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MemeState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducers",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "memeFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllFavorites",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllMemes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentMeme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFavoritesEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFavoritesIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFavoritesIdsAsStringArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFavoriteState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFavoritesTotal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeAndTotalSearch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeOffset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeSearch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeSelectedId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemesState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemesWithFavorites",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeTotal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getOffset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSearch",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTotalCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "memeFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "memeReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllMemes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMemeTotal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/meme/reducers/meme.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/app.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "clearState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "logger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/store/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ROOT_REDUCERS",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/store/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRouter",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/store/app.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GIPHY_API_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stateAPIURL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GIPHY_API_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stateAPIURL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}